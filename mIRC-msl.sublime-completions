/*
MIT License

Copyright (c) 2018 Evan Greene

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
{
  "scope": "source.msl",

  "completions":
  [
    // ###########################################################################################################################
    // mIRC Commands
    // ###########################################################################################################################
     { "trigger": "abook /         Display Address Book                           \tcommand /", "contents": "abook" }
    ,{ "trigger": "action /        Perform action in channel                      \tcommand /", "contents": "action" }
    ,{ "trigger": "ajinvite /      Toggle auto-join on invite features            \tcommand /", "contents": "ajinvite" }
    ,{ "trigger": "alias /         Add/Replace/Remove aliases.                    \tcommand /", "contents": "alias" }
    ,{ "trigger": "aline /         Add line of text to @window                    \tcommand /", "contents": "aline" }
    ,{ "trigger": "ame /           Send action to all channels                    \tcommand /", "contents": "ame" }
    ,{ "trigger": "amsg /          Send message to all channels                   \tcommand /", "contents": "amsg" }
    ,{ "trigger": "anick /         Set alternate nickname                         \tcommand /", "contents": "anick" }
    ,{ "trigger": "aop /           Turn on/off OR add to aop list                 \tcommand /", "contents": "aop" }
    ,{ "trigger": "auser /         Add or edit user                               \tcommand /", "contents": "auser" }
    ,{ "trigger": "auto /          Turn on/off OR add to aop list                 \tcommand /", "contents": "auto" }
    ,{ "trigger": "autojoin /      Autojoin used with \"on connect\" event        \tcommand /", "contents": "autojoin" }
    ,{ "trigger": "avoice /        Turn on/off OR add to avoice list              \tcommand /", "contents": "avoice" }
    ,{ "trigger": "away /          Set/Unset Away                                 \tcommand /", "contents": "away" }
    ,{ "trigger": "background /    Set background                      	          \tcommand /", "contents": "background" }
    ,{ "trigger": "ban /           Ban a user                                     \tcommand /", "contents": "ban" }
    ,{ "trigger": "bcopy /         Copy bytes from &var to &var                   \tcommand /", "contents": "bcopy" }
    ,{ "trigger": "beep /          Generate speaker beep                          \tcommand /", "contents": "beep" }
    ,{ "trigger": "bindip /        Set IP binding on/off                          \tcommand /", "contents": "bindip" }
    ,{ "trigger": "bread /         Read bytes from file into &var                 \tcommand /", "contents": "bread" }
    ,{ "trigger": "break /         Terminate execution of nearest loop            \tcommand /", "contents": "break" }
    ,{ "trigger": "breplace /	     Replace ascii var with binary var              \tcommand /", "contents": "breplace" }
    ,{ "trigger": "bset /          Set binary global variable                     \tcommand /", "contents": "bset" }
    ,{ "trigger": "btrunc /	       Truncate file to specified bytesize            \tcommand /", "contents": "btrunc" }
    ,{ "trigger": "bunset /	       Unset binary global variable                   \tcommand /", "contents": "bunset" }
    ,{ "trigger": "bwrite /	       Write binary data to file                      \tcommand /", "contents": "bwrite" }
    ,{ "trigger": "channel /	     Open channel central                           \tcommand /", "contents": "channel" }
    ,{ "trigger": "clear /	       Clear buffer of window                         \tcommand /", "contents": "clear" }
    ,{ "trigger": "clearall /	     Clear buffer of all windows                    \tcommand /", "contents": "clearall" }
    ,{ "trigger": "clearial /	     Clear IAL                                      \tcommand /", "contents": "clearial" }
    ,{ "trigger": "cline /	       Set color of line in nicklist or @window       \tcommand /", "contents": "cline" }
    ,{ "trigger": "clipboard /	   Copy text to clipboard                         \tcommand /", "contents": "clipboard" }
    ,{ "trigger": "close /	       Close windows of specified type                \tcommand /", "contents": "close" }
    ,{ "trigger": "closechats /	   Close all inactive DCC Chat windows            \tcommand /", "contents": "closechats" }
    ,{ "trigger": "closedccs /	   Close all inactive DCC Send/Get windows        \tcommand /", "contents": "closedccs" }
    ,{ "trigger": "closefserves /	 Close all inactive Fserve windows              \tcommand /", "contents": "closefserves" }
    ,{ "trigger": "closemsg /	     Close all or specified query window            \tcommand /", "contents": "closemsg" }
    ,{ "trigger": "cnick /	       Set color options for nick in addressbook      \tcommand /", "contents": "cnick" }
    ,{ "trigger": "color /	       Set color setting (same as /colour)            \tcommand /", "contents": "color" }
    ,{ "trigger": "colour /	       Set color setting (same as /color)             \tcommand /", "contents": "colour" }
    ,{ "trigger": "comclose /	     Close an existing COM connection               \tcommand /", "contents": "comclose" }
    ,{ "trigger": "comlist /	     Get list of all open COM object connections    \tcommand /", "contents": "comlist" }
    // DEPRECATED/REMOVED: ,{ "trigger": "commands /	                            \tcommand /", "contents": "commands" }
    ,{ "trigger": "comopen /	     Open a com connection                          \tcommand /", "contents": "comopen" }
    ,{ "trigger": "comreg /	       Register/Unregister a COM with windows         \tcommand /", "contents": "comreg" }
    ,{ "trigger": "continue /	     Jump to beginning of a loop                    \tcommand /", "contents": "continue" }
    ,{ "trigger": "copy /	         Copy source dir/file to destination            \tcommand /", "contents": "copy" }
    ,{ "trigger": "creq /	         Modify DCC Chat options                        \tcommand /", "contents": "creq" }
    ,{ "trigger": "ctcp /	         Send a CTCP request                            \tcommand /", "contents": "ctcp" }
    ,{ "trigger": "ctcpreply /	   Send a CTCP reply                              \tcommand /", "contents": "ctcpreply" }
    ,{ "trigger": "ctcps /	       Set or display status of CTCP event processing \tcommand /", "contents": "ctcps" }
    ,{ "trigger": "dcc /	         Send DCC request                               \tcommand /", "contents": "dcc" }
    ,{ "trigger": "dccserver /	   Turn DCC server on/off                         \tcommand /", "contents": "dccserver" }
    ,{ "trigger": "dde /	         Create DDE connection                          \tcommand /", "contents": "dde" }
    ,{ "trigger": "ddeserver /	   Turn DDE server on/off                         \tcommand /", "contents": "ddeserver" }
    ,{ "trigger": "debug /	       Output raw server messages to file/window      \tcommand /", "contents": "debug" }
    ,{ "trigger": "dec /	         Decrease variable by N amount                  \tcommand /", "contents": "dec" }
    ,{ "trigger": "describe /	     Send action to channel/person (also see /me)   \tcommand /", "contents": "describe" }
    ,{ "trigger": "dialog /	       Create a dialog window                         \tcommand /", "contents": "dialog" }
    ,{ "trigger": "did /	         Modify dialog controls                         \tcommand /", "contents": "did" }
    ,{ "trigger": "didtok /	       Add list of values to a dialog control         \tcommand /", "contents": "didtok" }
    ,{ "trigger": "disable /	     Disable a #group in all scripts                \tcommand /", "contents": "disable" }
    ,{ "trigger": "disconnect /	   Disconnect from current server                 \tcommand /", "contents": "disconnect" }
    ,{ "trigger": "dlevel /	       Set default userlevel for everyone             \tcommand /", "contents": "dlevel" }
    ,{ "trigger": "dline /	       Delete line from a @window                     \tcommand /", "contents": "dline" }
    ,{ "trigger": "dll /	         Call a function from a .DLL file               \tcommand /", "contents": "dll" }
    ,{ "trigger": "dns /	         Perform DNS lookup on a user/address           \tcommand /", "contents": "dns" }
    ,{ "trigger": "dqwindow /	     Enable/Disable/Show/Hide Dedicated query window\tcommand /", "contents": "dqwindow" }
    ,{ "trigger": "drawcopy /	     Copy part of picture to different position in @window\tcommand /", "contents": "drawcopy" }
    ,{ "trigger": "drawdot /	     Draw dot in @window                            \tcommand /", "contents": "drawdot" }
    ,{ "trigger": "drawfill /	     Draw and fill an area in @window               \tcommand /", "contents": "drawfill" }
    ,{ "trigger": "drawline /	     Draw line in @window                           \tcommand /", "contents": "drawline" }
    ,{ "trigger": "drawpic /	     Draw picture in @window                        \tcommand /", "contents": "drawpic" }
    ,{ "trigger": "drawrect /	     Draw rectangle in @window                      \tcommand /", "contents": "drawrect" }
    ,{ "trigger": "drawreplace /	 Replace color1 with color2 in @window          \tcommand /", "contents": "drawreplace" }
    ,{ "trigger": "drawrot /	     Rotate area of bitmap in @window               \tcommand /", "contents": "drawrot" }
    ,{ "trigger": "drawsave /	     Save picture in @window to a file              \tcommand /", "contents": "drawsave" }
    ,{ "trigger": "drawscroll /	   Scroll region in @window                       \tcommand /", "contents": "drawscroll" }
    ,{ "trigger": "drawsize /	     Extend bitmap size of @window                  \tcommand /", "contents": "drawsize" }
    ,{ "trigger": "drawtext /	     Draw text inside @window                       \tcommand /", "contents": "drawtext" }
    ,{ "trigger": "ebeeps /	       Enable/Disable 'event beeps' sound             \tcommand /", "contents": "ebeeps" }
    ,{ "trigger": "echo /	         Print text to a channel or @window             \tcommand /", "contents": "echo" }
    ,{ "trigger": "editbox /	     Set text inside of editbox to a value          \tcommand /", "contents": "editbox" }
    ,{ "trigger": "else /	         Logical construct used in IF statements        \tcommand /", "contents": "else" }
    ,{ "trigger": "elseif /	       Logical construct used in IF statements        \tcommand /", "contents": "elseif" }
    ,{ "trigger": "emailaddr /	   Modify email address shown in connect dialog   \tcommand /", "contents": "emailaddr" }
    ,{ "trigger": "enable /	       Enable a #group in all scripts                 \tcommand /", "contents": "enable" }
    ,{ "trigger": "events /	       Enable/Disable remote events processing        \tcommand /", "contents": "events" }
    ,{ "trigger": "exit /	         Exit mIRC                                      \tcommand /", "contents": "exit" }
    ,{ "trigger": "fclose /	       Close file open window triggered from /fopen   \tcommand /", "contents": "fclose" }
    ,{ "trigger": "filter /	       Scan src for *matchtext* and output it to dst  \tcommand /", "contents": "filter" }
    ,{ "trigger": "findtext /	     Search active window for text                  \tcommand /", "contents": "findtext" }
    ,{ "trigger": "finger /	       Send finger request to nick                    \tcommand /", "contents": "finger" }
    ,{ "trigger": "firewall /	     Set mIRC firewall settings                     \tcommand /", "contents": "firewall" }
    ,{ "trigger": "flash /	       Flash mIRC titlebar/tray                       \tcommand /", "contents": "flash" }
    ,{ "trigger": "flist /	       List all or matching files that are /fopen     \tcommand /", "contents": "flist" }
    ,{ "trigger": "flood /	       Set mIRC flood settings                        \tcommand /", "contents": "flood" }
    ,{ "trigger": "flush /	       Clear user list of invalid nicknames           \tcommand /", "contents": "flush" }
    ,{ "trigger": "flushini /	     Flush INI file to hard disk                    \tcommand /", "contents": "flushini" }
    ,{ "trigger": "fnord /	       Easter Egg: Echos \"Nothing to see here\"      \tcommand /", "contents": "fnord" }
    ,{ "trigger": "font /	         Set font of current window                     \tcommand /", "contents": "font" }
    ,{ "trigger": "fopen /	       Open a filename with a handle                  \tcommand /", "contents": "fopen" }
    ,{ "trigger": "fseek /	       Set pointer in fopen handle to a position      \tcommand /", "contents": "fseek" }
    ,{ "trigger": "fsend /	       Display or set dcc send on/off                 \tcommand /", "contents": "fsend" }
    ,{ "trigger": "fserve /	       Initiate DCC fileserver with user              \tcommand /", "contents": "fserve" }
    ,{ "trigger": "fullname /	     Change fullname shown in connect dialog        \tcommand /", "contents": "fullname" }
    ,{ "trigger": "fupdate /	     Set delay for window/channel text refresh      \tcommand /", "contents": "fupdate" }
    ,{ "trigger": "fwrite /	       Write text or binvar to a file fopen handle    \tcommand /", "contents": "fwrite" }
    ,{ "trigger": "ghide /	       Hides a previously loaded agent                \tcommand /", "contents": "ghide" }
    ,{ "trigger": "gload /	       Load an agent                                  \tcommand /", "contents": "gload" }
    ,{ "trigger": "gmove /	       Moves an agent                                 \tcommand /", "contents": "gmove" }
    ,{ "trigger": "gopts /	       Set options of a loaded agent                  \tcommand /", "contents": "gopts" }
    ,{ "trigger": "goto /	         Jump to a section in code or loop              \tcommand /", "contents": "goto" }
    ,{ "trigger": "gplay /	       Make agent play an animation                   \tcommand /", "contents": "gplay" }
    ,{ "trigger": "gpoint /	       Make agent point to position                   \tcommand /", "contents": "gpoint" }
    ,{ "trigger": "gqreq /	       Enable/Disable agent command queueing          \tcommand /", "contents": "gqreq" }
    ,{ "trigger": "groups /	       Display a list of #groups                      \tcommand /", "contents": "groups" }
    ,{ "trigger": "gshow /	       Display an agent                               \tcommand /", "contents": "gshow" }
    ,{ "trigger": "gsize /	       Resize an agent                                \tcommand /", "contents": "gsize" }
    ,{ "trigger": "gstop /	       Stop and remove all command queue from agent   \tcommand /", "contents": "gstop" }
    ,{ "trigger": "gtalk /	       Make agent speak text                          \tcommand /", "contents": "gtalk" }
    ,{ "trigger": "gunload /	     Unload an agent                                \tcommand /", "contents": "gunload" }
    ,{ "trigger": "guser /	       Look up address of nick and add to userlist    \tcommand /", "contents": "guser" }
    ,{ "trigger": "hadd /	         Insert key/value pair to hash table            \tcommand /", "contents": "hadd" }
    ,{ "trigger": "halt /	         Immediately stop further processing script     \tcommand /", "contents": "halt" }
    ,{ "trigger": "haltdef /	     Stop default processing of an event            \tcommand /", "contents": "haltdef" }
    ,{ "trigger": "hdec /	         Decrement value in a hash table                \tcommand /", "contents": "hdec" }
    ,{ "trigger": "hdel /	         Delete key/value pair in hash table            \tcommand /", "contents": "hdel" }
    ,{ "trigger": "help /	         Display mIRC helpfile                          \tcommand /", "contents": "help" }
    ,{ "trigger": "hfree /	       Free/Destroy a hash table                      \tcommand /", "contents": "hfree" }
    ,{ "trigger": "hinc /	         Increment value in a hash table                \tcommand /", "contents": "hinc" }
    ,{ "trigger": "hload /	       Load text file into already created hash table \tcommand /", "contents": "hload" }
    ,{ "trigger": "hmake /	       Create a hash table                            \tcommand /", "contents": "hmake" }
    ,{ "trigger": "hop /	         Part and join channel in single command        \tcommand /", "contents": "hop" }
    ,{ "trigger": "hotlink /	     Override popups menu on right clicking word    \tcommand /", "contents": "hotlink" }
    ,{ "trigger": "hsave /	       Save a hash table to a file                    \tcommand /", "contents": "hsave" }
    ,{ "trigger": "ial /	         Set Internal-Address-List on/off               \tcommand /", "contents": "ial" }
    ,{ "trigger": "ialclear /	     Clear Interal-Address-List data                \tcommand /", "contents": "ialclear" }
    ,{ "trigger": "ialmark /	     Mark an IAL entry with a value                 \tcommand /", "contents": "ialmark" }
    ,{ "trigger": "identd /	       Enable/disable built-in identd server          \tcommand /", "contents": "identd" }
    ,{ "trigger": "if /	           Logical condition operation used in scripts    \tcommand /", "contents": "if" }
    ,{ "trigger": "ignore /	       Ignore a user/address                          \tcommand /", "contents": "ignore" }
    ,{ "trigger": "iline /	       Insert line into @window                       \tcommand /", "contents": "iline" }
    ,{ "trigger": "inc /	         Increment variable by N amount                 \tcommand /", "contents": "inc" }
    ,{ "trigger": "iuser /	       Set or remove info line in userlist            \tcommand /", "contents": "iuser" }
    ,{ "trigger": "leave /	       Leave/part a channel (same as /part)           \tcommand /", "contents": "leave" }
    ,{ "trigger": "linesep /	     Print line separator at a specified target     \tcommand /", "contents": "linesep" }
    ,{ "trigger": "links /	       Display servers that are linked to current server\tcommand /", "contents": "links" }
    ,{ "trigger": "list /	         Display channel list                           \tcommand /", "contents": "list" }
    ,{ "trigger": "load /	         Load a script file                             \tcommand /", "contents": "load" }
    ,{ "trigger": "loadbuf /	     Load buffer from filename to channel/@window   \tcommand /", "contents": "loadbuf" }
    ,{ "trigger": "localinfo /	   Looks up and sets local settings               \tcommand /", "contents": "localinfo" }
    ,{ "trigger": "log /	         Turn on/off logging to a file                  \tcommand /", "contents": "log" }
    ,{ "trigger": "logview /	     Display text file in mIRC                      \tcommand /", "contents": "logview" }
    ,{ "trigger": "maxdepth /	     Set max recursion limit for alias              \tcommand /", "contents": "maxdepth" }
    ,{ "trigger": "mdi /	         Arrange MDI windows in tile or cascade         \tcommand /", "contents": "mdi" }
    ,{ "trigger": "me /	           Send action to channel/person                  \tcommand /", "contents": "me" }
    ,{ "trigger": "menubar /	     Turn on/off or display menubar status          \tcommand /", "contents": "menubar" }
    ,{ "trigger": "mkdir /	       Creates a new directory                        \tcommand /", "contents": "mkdir" }
    ,{ "trigger": "mnick /	       Change main nickname                           \tcommand /", "contents": "mnick" }
    ,{ "trigger": "mode /	         Change mode for nick/channel                   \tcommand /", "contents": "mode" }
    ,{ "trigger": "msg /	         Send message to channel/person                 \tcommand /", "contents": "msg" }
    ,{ "trigger": "noop /	         Discard/no operation                           \tcommand /", "contents": "noop" }
    ,{ "trigger": "notify /	       Manage the notify feature                      \tcommand /", "contents": "notify" }
    ,{ "trigger": "omsg /	         Broadcast message to OPs on chans you are an OP\tcommand /", "contents": "omsg" }
    ,{ "trigger": "onotice /	     Broadcast notice to OPs on chans you are an OP \tcommand /", "contents": "onotice" }
    ,{ "trigger": "parseline /	   Inject text as if they are being sent/received \tcommand /", "contents": "parseline" }
    ,{ "trigger": "part /	         Leave/part a channel                           \tcommand /", "contents": "part" }
    ,{ "trigger": "partall /	     Leave/part all channels                        \tcommand /", "contents": "partall" }
    ,{ "trigger": "pdcc /	         Send DCC packets without waiting for acks      \tcommand /", "contents": "pdcc" }
    ,{ "trigger": "perform /	     Enable/disable perform section in options      \tcommand /", "contents": "perform" }
    ,{ "trigger": "play /	         Output contents of a file to channel/user      \tcommand /", "contents": "play" }
    ,{ "trigger": "playctrl /	     Open Play Central window                       \tcommand /", "contents": "playctrl" }
    ,{ "trigger": "pop /	         Perform delayed op on a user                   \tcommand /", "contents": "pop" }
    ,{ "trigger": "protect /	     Manage the built-in protect list               \tcommand /", "contents": "protect" }
    ,{ "trigger": "proxy /	       Change firewall settings                       \tcommand /", "contents": "proxy" }
    ,{ "trigger": "pvoice /	       Perform delayed voice on a user                \tcommand /", "contents": "pvoice" }
    ,{ "trigger": "qme /	         Send action to all query windows               \tcommand /", "contents": "qme" }
    ,{ "trigger": "qmsg /	         Send message to all query windows              \tcommand /", "contents": "qmsg" }
    ,{ "trigger": "query /	       Open query window for online/offline user      \tcommand /", "contents": "query" }
    ,{ "trigger": "queryrn /	     Change nickname of open query window           \tcommand /", "contents": "queryrn" }
    ,{ "trigger": "quit /	         Disconnect from IRC                            \tcommand /", "contents": "quit" }
    ,{ "trigger": "quote /	       Send raw message to server (use /raw instead)  \tcommand /", "contents": "quote" }
    ,{ "trigger": "raw /	         Send a raw message to server                   \tcommand /", "contents": "raw" }
    ,{ "trigger": "registration /	 Open the mIRC registration (enter serial #)    \tcommand /", "contents": "registration" }
    ,{ "trigger": "reload /	       Reload a script file without triggering load event\tcommand /", "contents": "reload" }
    ,{ "trigger": "remini /	       Delete section or item from INI file           \tcommand /", "contents": "remini" }
    ,{ "trigger": "remote /	       Toggle remote, CTCPS, and raw events processing\tcommand /", "contents": "remote" }
    ,{ "trigger": "remove /	       Delete a file                                  \tcommand /", "contents": "remove" }
    ,{ "trigger": "rename /	       Rename a file                                  \tcommand /", "contents": "rename" }
    ,{ "trigger": "renwin /	       Rename a @window                               \tcommand /", "contents": "renwin" }
    ,{ "trigger": "reseterror /	   Reset error catches with :error label          \tcommand /", "contents": "reseterror" }
    ,{ "trigger": "resetidle /	   Reset $idle to 0                               \tcommand /", "contents": "resetidle" }
    ,{ "trigger": "return /	       Return a value and exit subroutine             \tcommand /", "contents": "return" }
    ,{ "trigger": "returnex /      Return a value (if exist) and exit subroutine	\tcommand /", "contents": "returnex" }
    ,{ "trigger": "rlevel /	       Remove users with specified level from userlist\tcommand /", "contents": "rlevel" }
    ,{ "trigger": "rline /	       Replace line in @window                        \tcommand /", "contents": "rline" }
    ,{ "trigger": "rmdir /	       Delete empty directory (error if nonempty)     \tcommand /", "contents": "rmdir" }
    ,{ "trigger": "run /	         Execute a file with default application        \tcommand /", "contents": "run" }
    ,{ "trigger": "ruser /	       Remove a user or level from a user             \tcommand /", "contents": "ruser" }
    ,{ "trigger": "save /	         Save popups/users/variables to file            \tcommand /", "contents": "save" }
    ,{ "trigger": "savebuf /	     Save buffer to a file                          \tcommand /", "contents": "savebuf" }
    ,{ "trigger": "saveini /	     Save or overwrite ini file to disk             \tcommand /", "contents": "saveini" }
    ,{ "trigger": "say /	         Send message to current channel/window         \tcommand /", "contents": "say" }
    ,{ "trigger": "scid /	         Set associated context of script/command to cid\tcommand /", "contents": "scid" }
    ,{ "trigger": "scon /	         Set associated context of script/command to Nth window\tcommand /", "contents": "scon" }
    ,{ "trigger": "server /	       Connect to a server                            \tcommand /", "contents": "server" }
    ,{ "trigger": "set /	         Set a %variable to a value                     \tcommand /", "contents": "set" }
    ,{ "trigger": "setlayer /	     Set transparency of a window                   \tcommand /", "contents": "setlayer" }
    ,{ "trigger": "showmirc /	     Manipulate main mIRC window                    \tcommand /", "contents": "showmirc" }
    ,{ "trigger": "signal /	       Send signal to all loaded scripts              \tcommand /", "contents": "signal" }
    ,{ "trigger": "sline /	       Select line(s) in @window                      \tcommand /", "contents": "sline" }
    ,{ "trigger": "sockaccept /	   Accept a connection to a /socklisten port      \tcommand /", "contents": "sockaccept" }
    ,{ "trigger": "sockclose /	   Close a connection of /socklisten              \tcommand /", "contents": "sockclose" }
    ,{ "trigger": "socklist /	     Display list all open sockets                  \tcommand /", "contents": "socklist" }
    ,{ "trigger": "socklisten /	   Listen on a port for connections               \tcommand /", "contents": "socklisten" }
    ,{ "trigger": "sockmark /	     Assign data to a socket for later reference    \tcommand /", "contents": "sockmark" }
    ,{ "trigger": "sockopen /	     Open a connection to ip/host:port              \tcommand /", "contents": "sockopen" }
    ,{ "trigger": "sockpause /	   Pause or restarted socket when reading data    \tcommand /", "contents": "sockpause" }
    ,{ "trigger": "sockread /	     Read bytes from socket into variable           \tcommand /", "contents": "sockread" }
    ,{ "trigger": "sockrename /	   Rename an existing socket connection           \tcommand /", "contents": "sockrename" }
    ,{ "trigger": "sockudp /	     Send UDP data to ip/host:port of a /sockopen   \tcommand /", "contents": "sockudp" }
    ,{ "trigger": "sockwrite /	   Send TCP data to ip/host:port of a /sockopen   \tcommand /", "contents": "sockwrite" }
    ,{ "trigger": "sound /	       Send sound command to nick/channel             \tcommand /", "contents": "sound" }
    ,{ "trigger": "speak /	       Speak text audibly                             \tcommand /", "contents": "speak" }
    ,{ "trigger": "splay /	       Play an audio file                             \tcommand /", "contents": "splay" }
    ,{ "trigger": "sreq /	         Modify mIRC DCC send options                   \tcommand /", "contents": "sreq" }
    ,{ "trigger": "strip /	       Strip control-codes from text                  \tcommand /", "contents": "strip" }
    ,{ "trigger": "switchbar /	   Set switchbar on/off or display current status \tcommand /", "contents": "switchbar" }
    ,{ "trigger": "timer /	       Create a timer to execute code                 \tcommand /", "contents": "timer" }
    ,{ "trigger": "timestamp /	   Enable/Disable timestamps or set format        \tcommand /", "contents": "timestamp" }
    ,{ "trigger": "tip /	         Change text of active balloon tip or close     \tcommand /", "contents": "tip" }
    ,{ "trigger": "tips /	         Enable/disable tips options                    \tcommand /", "contents": "tips" }
    ,{ "trigger": "titlebar /	     Change titlebar of mIRC window or @window      \tcommand /", "contents": "titlebar" }
    ,{ "trigger": "tnick /	       Change IRC nick without changing main/alt nick \tcommand /", "contents": "tnick" }
    ,{ "trigger": "tokenize /	     Create tokenize values for $1, $2, etc.        \tcommand /", "contents": "tokenize" }
    ,{ "trigger": "toolbar /	     Modify toolbar                                 \tcommand /", "contents": "toolbar" }
    ,{ "trigger": "tray /	         Modify tray settings                           \tcommand /", "contents": "tray" }
    ,{ "trigger": "treebar /	     Enable/Disable treebar                         \tcommand /", "contents": "treebar" }
    ,{ "trigger": "ulist /	       Display list levels of users based on criteria \tcommand /", "contents": "ulist" }
    ,{ "trigger": "unload /	       Unload a script                                \tcommand /", "contents": "unload" }
    ,{ "trigger": "unset /	       Unset/delete a %variable                       \tcommand /", "contents": "unset" }
    ,{ "trigger": "unsetall /	     Unset/delete all %variables                    \tcommand /", "contents": "unsetall" }
    ,{ "trigger": "updatenl /	     Force update of IAL                            \tcommand /", "contents": "updatenl" }
    ,{ "trigger": "url /	         Enable/disable URL catcher or open URL         \tcommand /", "contents": "url" }
    ,{ "trigger": "username /	     Modify current username or display current     \tcommand /", "contents": "username" }
    ,{ "trigger": "uwho /	         Lookup and display userinfo in address book    \tcommand /", "contents": "uwho" }
    ,{ "trigger": "var /	         Create/replace local scope variables           \tcommand /", "contents": "var" }
    ,{ "trigger": "vcadd /	       Add voice command for Speech Software          \tcommand /", "contents": "vcadd" }
    ,{ "trigger": "vcmd /	         Enable voice commands for Speech Software      \tcommand /", "contents": "vcmd" }
    ,{ "trigger": "vcrem /	       Remove voice comand from voice command list    \tcommand /", "contents": "vcrem" }
    ,{ "trigger": "vol /	         Set volume on system                           \tcommand /", "contents": "vol" }
    ,{ "trigger": "wallchops /	   Send notice to all ops on a channel            \tcommand /", "contents": "wallchops" }
    // DEPRECATED: replace by /splay ,{ "trigger": "wavplay /	                                                             \tcommand /", "contents": "wavplay" }
    ,{ "trigger": "while /	       Loop block of code until condition             \tcommand /", "contents": "while" }
    ,{ "trigger": "window /	       Create or manipulate custom @window            \tcommand /", "contents": "window" }
    ,{ "trigger": "winhelp /	     Open Microsoft online help files (.chm/.hlp)   \tcommand /", "contents": "winhelp" }
    ,{ "trigger": "write /	       Write to a file                                \tcommand /", "contents": "write" }
    ,{ "trigger": "writeini /      Write to a section in an ini file              \tcommand /", "contents": "writeini" }
    ,{ "trigger": "xyzzy /         Easter Egg: Prints \"Nothing happens\"         \tcommand /", "contents": "xyzzy" }

    //###########################################################################################################################
    //mIRC Identifiers
    //###########################################################################################################################
    ,{ "trigger": "abook $                                           \tidentifier $", "contents": "abook" }
    ,{ "trigger": "abs $                                             \tidentifier $", "contents": "abs" }
    ,{ "trigger": "acos $                                            \tidentifier $", "contents": "acos" }
    ,{ "trigger": "active $                                          \tidentifier $", "contents": "active" }
    ,{ "trigger": "activecid $                                       \tidentifier $", "contents": "activecid" }
    ,{ "trigger": "activewid $                                       \tidentifier $", "contents": "activewid" }
    ,{ "trigger": "adate $                                           \tidentifier $", "contents": "adate" }
    ,{ "trigger": "address $                                         \tidentifier $", "contents": "address" }
    ,{ "trigger": "addtok $                                          \tidentifier $", "contents": "addtok" }
    ,{ "trigger": "addtokcs $                                        \tidentifier $", "contents": "addtokcs" }
    ,{ "trigger": "agent $                                           \tidentifier $", "contents": "agent" }
    ,{ "trigger": "agentname $                                       \tidentifier $", "contents": "agentname" }
    ,{ "trigger": "agentstat $                                       \tidentifier $", "contents": "agentstat" }
    ,{ "trigger": "agentver $                                        \tidentifier $", "contents": "agentver" }
    ,{ "trigger": "alias $                                           \tidentifier $", "contents": "alias" }
    ,{ "trigger": "and $                                             \tidentifier $", "contents": "and" }
    ,{ "trigger": "anick $                                           \tidentifier $", "contents": "anick" }
    ,{ "trigger": "ansi2mirc $                                       \tidentifier $", "contents": "ansi2mirc" }
    ,{ "trigger": "aop $                                             \tidentifier $", "contents": "aop" }
    ,{ "trigger": "appactive $                                       \tidentifier $", "contents": "appactive" }
    ,{ "trigger": "appstate $                                        \tidentifier $", "contents": "appstate" }
    ,{ "trigger": "asc $                                             \tidentifier $", "contents": "asc" }
    ,{ "trigger": "asctime $                                         \tidentifier $", "contents": "asctime" }
    ,{ "trigger": "asin $                                            \tidentifier $", "contents": "asin" }
    ,{ "trigger": "atan $                                            \tidentifier $", "contents": "atan" }
    ,{ "trigger": "atan2 $                                           \tidentifier $", "contents": "atan2" }
    ,{ "trigger": "auto $                                            \tidentifier $", "contents": "auto" }
    ,{ "trigger": "avoice $                                          \tidentifier $", "contents": "avoice" }
    ,{ "trigger": "away $                                            \tidentifier $", "contents": "away" }
    ,{ "trigger": "awaymsg $                                         \tidentifier $", "contents": "awaymsg" }
    ,{ "trigger": "awaytime $                                        \tidentifier $", "contents": "awaytime" }
    ,{ "trigger": "banlist $                                         \tidentifier $", "contents": "banlist" }
    ,{ "trigger": "banmask $                                         \tidentifier $", "contents": "banmask" }
    ,{ "trigger": "base $                                            \tidentifier $", "contents": "base" }
    ,{ "trigger": "beta $                                            \tidentifier $", "contents": "beta" }
    ,{ "trigger": "bfind $                                           \tidentifier $", "contents": "bfind" }
    ,{ "trigger": "bindip $                                          \tidentifier $", "contents": "bindip" }
    ,{ "trigger": "bitoff $                                          \tidentifier $", "contents": "bitoff" }
    ,{ "trigger": "biton $                                           \tidentifier $", "contents": "biton" }
    ,{ "trigger": "bits $                                            \tidentifier $", "contents": "bits" }
    ,{ "trigger": "bnick $                                           \tidentifier $", "contents": "bnick" }
    ,{ "trigger": "bvar $                                            \tidentifier $", "contents": "bvar" }
    ,{ "trigger": "bytes $                                           \tidentifier $", "contents": "bytes" }
    ,{ "trigger": "calc $                                            \tidentifier $", "contents": "calc" }
    ,{ "trigger": "caller $                                          \tidentifier $", "contents": "caller" }
    ,{ "trigger": "cancel $                                          \tidentifier $", "contents": "cancel" }
    ,{ "trigger": "cb $                                              \tidentifier $", "contents": "cb" }
    ,{ "trigger": "cd $                                              \tidentifier $", "contents": "cd" }
    ,{ "trigger": "ceil $                                            \tidentifier $", "contents": "ceil" }
    ,{ "trigger": "chan $                                            \tidentifier $", "contents": "chan" }
    ,{ "trigger": "chanmodes $                                       \tidentifier $", "contents": "chanmodes" }
    ,{ "trigger": "channel $                                         \tidentifier $", "contents": "channel" }
    ,{ "trigger": "chantypes $                                       \tidentifier $", "contents": "chantypes" }
    ,{ "trigger": "chat $                                            \tidentifier $", "contents": "chat" }
    ,{ "trigger": "chr $                                             \tidentifier $", "contents": "chr" }
    ,{ "trigger": "cid $                                             \tidentifier $", "contents": "cid" }
    ,{ "trigger": "clevel $                                          \tidentifier $", "contents": "clevel" }
    ,{ "trigger": "click $                                           \tidentifier $", "contents": "click" }
    ,{ "trigger": "cmdbox $                                          \tidentifier $", "contents": "cmdbox" }
    ,{ "trigger": "cmdline $                                         \tidentifier $", "contents": "cmdline" }
    ,{ "trigger": "cnick $                                           \tidentifier $", "contents": "cnick" }
    ,{ "trigger": "color $                                           \tidentifier $", "contents": "color" }
    ,{ "trigger": "colour $                                          \tidentifier $", "contents": "colour" }
    ,{ "trigger": "com $                                             \tidentifier $", "contents": "com" }
    ,{ "trigger": "comcall $                                         \tidentifier $", "contents": "comcall" }
    ,{ "trigger": "comchan $                                         \tidentifier $", "contents": "comchan" }
    ,{ "trigger": "comchar $                                         \tidentifier $", "contents": "comchar" }
    ,{ "trigger": "comerr $                                          \tidentifier $", "contents": "comerr" }
    ,{ "trigger": "compact $                                         \tidentifier $", "contents": "compact" }
    ,{ "trigger": "compress $                                        \tidentifier $", "contents": "compress" }
    ,{ "trigger": "comval $                                          \tidentifier $", "contents": "comval" }
    ,{ "trigger": "cos $                                             \tidentifier $", "contents": "cos" }
    ,{ "trigger": "cosh $                                            \tidentifier $", "contents": "cosh" }
    ,{ "trigger": "count $                                           \tidentifier $", "contents": "count" }
    ,{ "trigger": "cr $                                              \tidentifier $", "contents": "cr" }
    ,{ "trigger": "crc $                                             \tidentifier $", "contents": "crc" }
    ,{ "trigger": "creq $                                            \tidentifier $", "contents": "creq" }
    ,{ "trigger": "crlf $                                            \tidentifier $", "contents": "crlf" }
    ,{ "trigger": "ctime $                                           \tidentifier $", "contents": "ctime" }
    ,{ "trigger": "ctimer $                                          \tidentifier $", "contents": "ctimer" }
    ,{ "trigger": "ctrlenter $                                       \tidentifier $", "contents": "ctrlenter" }
    ,{ "trigger": "date $                                            \tidentifier $", "contents": "date" }
    ,{ "trigger": "day $                                             \tidentifier $", "contents": "day" }
    ,{ "trigger": "daylight $                                        \tidentifier $", "contents": "daylight" }
    ,{ "trigger": "dbuh $                                            \tidentifier $", "contents": "dbuh" }
    ,{ "trigger": "dbuw $                                            \tidentifier $", "contents": "dbuw" }
    ,{ "trigger": "dccignore $                                       \tidentifier $", "contents": "dccignore" }
    ,{ "trigger": "dccport $                                         \tidentifier $", "contents": "dccport" }
    ,{ "trigger": "dde $                                             \tidentifier $", "contents": "dde" }
    ,{ "trigger": "ddename $                                         \tidentifier $", "contents": "ddename" }
    ,{ "trigger": "debug $                                           \tidentifier $", "contents": "debug" }
    ,{ "trigger": "decode $                                          \tidentifier $", "contents": "decode" }
    ,{ "trigger": "decompress $                                      \tidentifier $", "contents": "decompress" }
    ,{ "trigger": "deltok $                                          \tidentifier $", "contents": "deltok" }
    ,{ "trigger": "devent $                                          \tidentifier $", "contents": "devent" }
    ,{ "trigger": "dialog $                                          \tidentifier $", "contents": "dialog" }
    ,{ "trigger": "did $                                             \tidentifier $", "contents": "did" }
    ,{ "trigger": "didreg $                                          \tidentifier $", "contents": "didreg" }
    ,{ "trigger": "didtok $                                          \tidentifier $", "contents": "didtok" }
    ,{ "trigger": "didwm $                                           \tidentifier $", "contents": "didwm" }
    ,{ "trigger": "dir $                                             \tidentifier $", "contents": "dir" }
    ,{ "trigger": "disk $                                            \tidentifier $", "contents": "disk" }
    ,{ "trigger": "dlevel $                                          \tidentifier $", "contents": "dlevel" }
    ,{ "trigger": "dll $                                             \tidentifier $", "contents": "dll" }
    ,{ "trigger": "dllcall $                                         \tidentifier $", "contents": "dllcall" }
    ,{ "trigger": "dname $                                           \tidentifier $", "contents": "dname" }
    ,{ "trigger": "dns $                                             \tidentifier $", "contents": "dns" }
    ,{ "trigger": "dqwindow $                                        \tidentifier $", "contents": "dqwindow" }
    ,{ "trigger": "duration $                                        \tidentifier $", "contents": "duration" }
    ,{ "trigger": "ebeeps $                                          \tidentifier $", "contents": "ebeeps" }
    ,{ "trigger": "editbox $                                         \tidentifier $", "contents": "editbox" }
    ,{ "trigger": "email $                                           \tidentifier $", "contents": "email" }
    ,{ "trigger": "emailaddr $                                       \tidentifier $", "contents": "emailaddr" }
    ,{ "trigger": "encode $                                          \tidentifier $", "contents": "encode" }
    ,{ "trigger": "envvar $                                          \tidentifier $", "contents": "envvar" }
    ,{ "trigger": "error $                                           \tidentifier $", "contents": "error" }
    ,{ "trigger": "eval $                                            \tidentifier $", "contents": "eval" }
    ,{ "trigger": "evalnext $                                        \tidentifier $", "contents": "evalnext" }
    ,{ "trigger": "event $                                           \tidentifier $", "contents": "event" }
    ,{ "trigger": "eventid $                                         \tidentifier $", "contents": "eventid" }
    ,{ "trigger": "exists $                                          \tidentifier $", "contents": "exists" }
    ,{ "trigger": "exiting $                                         \tidentifier $", "contents": "exiting" }
    ,{ "trigger": "false $                                           \tidentifier $", "contents": "false" }
    ,{ "trigger": "feof $                                            \tidentifier $", "contents": "feof" }
    ,{ "trigger": "ferr $                                            \tidentifier $", "contents": "ferr" }
    ,{ "trigger": "fgetc $                                           \tidentifier $", "contents": "fgetc" }
    ,{ "trigger": "file $                                            \tidentifier $", "contents": "file" }
    ,{ "trigger": "filename $                                        \tidentifier $", "contents": "filename" }
    ,{ "trigger": "filtered $                                        \tidentifier $", "contents": "filtered" }
    ,{ "trigger": "finddir $                                         \tidentifier $", "contents": "finddir" }
    ,{ "trigger": "finddirn $                                        \tidentifier $", "contents": "finddirn" }
    ,{ "trigger": "findfile $                                        \tidentifier $", "contents": "findfile" }
    ,{ "trigger": "findfilen $                                       \tidentifier $", "contents": "findfilen" }
    ,{ "trigger": "findtok $                                         \tidentifier $", "contents": "findtok" }
    ,{ "trigger": "findtokcs $                                       \tidentifier $", "contents": "findtokcs" }
    ,{ "trigger": "fline $                                           \tidentifier $", "contents": "fline" }
    ,{ "trigger": "floor $                                           \tidentifier $", "contents": "floor" }
    ,{ "trigger": "font $                                            \tidentifier $", "contents": "font" }
    ,{ "trigger": "fopen $                                           \tidentifier $", "contents": "fopen" }
    ,{ "trigger": "fread $                                           \tidentifier $", "contents": "fread" }
    ,{ "trigger": "fromeditbox $                                     \tidentifier $", "contents": "fromeditbox" }
    ,{ "trigger": "fserv $                                           \tidentifier $", "contents": "fserv" }
    ,{ "trigger": "fserve $                                          \tidentifier $", "contents": "fserve" }
    ,{ "trigger": "fulladdress $                                     \tidentifier $", "contents": "fulladdress" }
    ,{ "trigger": "fulldate $                                        \tidentifier $", "contents": "fulldate" }
    ,{ "trigger": "fullname $                                        \tidentifier $", "contents": "fullname" }
    ,{ "trigger": "fullscreen $                                      \tidentifier $", "contents": "fullscreen" }
    ,{ "trigger": "get $                                             \tidentifier $", "contents": "get" }
    ,{ "trigger": "getdir $                                          \tidentifier $", "contents": "getdir" }
    ,{ "trigger": "getdot $                                          \tidentifier $", "contents": "getdot" }
    ,{ "trigger": "gettok $                                          \tidentifier $", "contents": "gettok" }
    ,{ "trigger": "gmt $                                             \tidentifier $", "contents": "gmt" }
    ,{ "trigger": "group $                                           \tidentifier $", "contents": "group" }
    ,{ "trigger": "halted $                                          \tidentifier $", "contents": "halted" }
    ,{ "trigger": "hash $                                            \tidentifier $", "contents": "hash" }
    ,{ "trigger": "height $                                          \tidentifier $", "contents": "height" }
    ,{ "trigger": "hfile $                                           \tidentifier $", "contents": "hfile" }
    ,{ "trigger": "hfind $                                           \tidentifier $", "contents": "hfind" }
    ,{ "trigger": "hget $                                            \tidentifier $", "contents": "hget" }
    ,{ "trigger": "highlight $                                       \tidentifier $", "contents": "highlight" }
    ,{ "trigger": "hmac $                                            \tidentifier $", "contents": "hmac" }
    ,{ "trigger": "hmatch $                                          \tidentifier $", "contents": "hmatch" }
    ,{ "trigger": "hnick $                                           \tidentifier $", "contents": "hnick" }
    ,{ "trigger": "host $                                            \tidentifier $", "contents": "host" }
    ,{ "trigger": "hotline $                                         \tidentifier $", "contents": "hotline" }
    ,{ "trigger": "hotlinepos $                                      \tidentifier $", "contents": "hotlinepos" }
    ,{ "trigger": "hotlink $                                         \tidentifier $", "contents": "hotlink" }
    ,{ "trigger": "hotp $                                            \tidentifier $", "contents": "hotp" }
    ,{ "trigger": "hregex $                                          \tidentifier $", "contents": "hregex" }
    ,{ "trigger": "hypot $                                           \tidentifier $", "contents": "hypot" }
    ,{ "trigger": "iaddress $                                        \tidentifier $", "contents": "iaddress" }
    ,{ "trigger": "ial $                                             \tidentifier $", "contents": "ial" }
    ,{ "trigger": "ialchan $                                         \tidentifier $", "contents": "ialchan" }
    ,{ "trigger": "ibl $                                             \tidentifier $", "contents": "ibl" }
    ,{ "trigger": "idle $                                            \tidentifier $", "contents": "idle" }
    ,{ "trigger": "iel $                                             \tidentifier $", "contents": "iel" }
    ,{ "trigger": "ifmatch $                                         \tidentifier $", "contents": "ifmatch" }
    ,{ "trigger": "ifmatch2 $                                        \tidentifier $", "contents": "ifmatch2" }
    ,{ "trigger": "ignore $                                          \tidentifier $", "contents": "ignore" }
    ,{ "trigger": "iif $                                             \tidentifier $", "contents": "iif" }
    ,{ "trigger": "iil $                                             \tidentifier $", "contents": "iil" }
    ,{ "trigger": "inellipse $                                       \tidentifier $", "contents": "inellipse" }
    ,{ "trigger": "ini $                                             \tidentifier $", "contents": "ini" }
    ,{ "trigger": "initopic $                                        \tidentifier $", "contents": "initopic" }
    ,{ "trigger": "inmidi $                                          \tidentifier $", "contents": "inmidi" }
    ,{ "trigger": "inmode $                                          \tidentifier $", "contents": "inmode" }
    ,{ "trigger": "inmp3 $                                           \tidentifier $", "contents": "inmp3" }
    ,{ "trigger": "inpaste $                                         \tidentifier $", "contents": "inpaste" }
    ,{ "trigger": "inpoly $                                          \tidentifier $", "contents": "inpoly" }
    ,{ "trigger": "input $                                           \tidentifier $", "contents": "input" }
    ,{ "trigger": "inrect $                                          \tidentifier $", "contents": "inrect" }
    ,{ "trigger": "inroundrect $                                     \tidentifier $", "contents": "inroundrect" }
    ,{ "trigger": "insong $                                          \tidentifier $", "contents": "insong" }
    ,{ "trigger": "instok $                                          \tidentifier $", "contents": "instok" }
    ,{ "trigger": "int $                                             \tidentifier $", "contents": "int" }
    ,{ "trigger": "intersect $                                       \tidentifier $", "contents": "intersect" }
    ,{ "trigger": "inwave $                                          \tidentifier $", "contents": "inwave" }
    ,{ "trigger": "inwho $                                           \tidentifier $", "contents": "inwho" }
    ,{ "trigger": "ip $                                              \tidentifier $", "contents": "ip" }
    ,{ "trigger": "iptype $                                          \tidentifier $", "contents": "iptype" }
    ,{ "trigger": "iql $                                             \tidentifier $", "contents": "iql" }
    ,{ "trigger": "isalias $                                         \tidentifier $", "contents": "isalias" }
    ,{ "trigger": "isbit $                                           \tidentifier $", "contents": "isbit" }
    ,{ "trigger": "isdde $                                           \tidentifier $", "contents": "isdde" }
    ,{ "trigger": "isdir $                                           \tidentifier $", "contents": "isdir" }
    ,{ "trigger": "isfile $                                          \tidentifier $", "contents": "isfile" }
    ,{ "trigger": "isid $                                            \tidentifier $", "contents": "isid" }
    ,{ "trigger": "islower $                                         \tidentifier $", "contents": "islower" }
    ,{ "trigger": "istok $                                           \tidentifier $", "contents": "istok" }
    ,{ "trigger": "isupper $                                         \tidentifier $", "contents": "isupper" }
    ,{ "trigger": "isutf $                                           \tidentifier $", "contents": "isutf" }
    ,{ "trigger": "keychar $                                         \tidentifier $", "contents": "keychar" }
    ,{ "trigger": "keyrpt $                                          \tidentifier $", "contents": "keyrpt" }
    ,{ "trigger": "keyval $                                          \tidentifier $", "contents": "keyval" }
    ,{ "trigger": "knick $                                           \tidentifier $", "contents": "knick" }
    ,{ "trigger": "lactive $                                         \tidentifier $", "contents": "lactive" }
    ,{ "trigger": "lactivecid $                                      \tidentifier $", "contents": "lactivecid" }
    ,{ "trigger": "lactivewid $                                      \tidentifier $", "contents": "lactivewid" }
    ,{ "trigger": "left $                                            \tidentifier $", "contents": "left" }
    ,{ "trigger": "leftwin $                                         \tidentifier $", "contents": "leftwin" }
    ,{ "trigger": "leftwincid $                                      \tidentifier $", "contents": "leftwincid" }
    ,{ "trigger": "leftwinwid $                                      \tidentifier $", "contents": "leftwinwid" }
    ,{ "trigger": "len $                                             \tidentifier $", "contents": "len" }
    ,{ "trigger": "level $                                           \tidentifier $", "contents": "level" }
    ,{ "trigger": "lf $                                              \tidentifier $", "contents": "lf" }
    ,{ "trigger": "line $                                            \tidentifier $", "contents": "line" }
    ,{ "trigger": "lines $                                           \tidentifier $", "contents": "lines" }
    ,{ "trigger": "link $                                            \tidentifier $", "contents": "link" }
    ,{ "trigger": "lock $                                            \tidentifier $", "contents": "lock" }
    ,{ "trigger": "locked $                                          \tidentifier $", "contents": "locked" }
    ,{ "trigger": "lof $                                             \tidentifier $", "contents": "lof" }
    ,{ "trigger": "log $                                             \tidentifier $", "contents": "log" }
    ,{ "trigger": "log10 $                                           \tidentifier $", "contents": "log10" }
    ,{ "trigger": "logdir $                                          \tidentifier $", "contents": "logdir" }
    ,{ "trigger": "logstamp $                                        \tidentifier $", "contents": "logstamp" }
    ,{ "trigger": "logstampfmt $                                     \tidentifier $", "contents": "logstampfmt" }
    ,{ "trigger": "longfn $                                          \tidentifier $", "contents": "longfn" }
    ,{ "trigger": "longip $                                          \tidentifier $", "contents": "longip" }
    ,{ "trigger": "lower $                                           \tidentifier $", "contents": "lower" }
    ,{ "trigger": "ltimer $                                          \tidentifier $", "contents": "ltimer" }
    ,{ "trigger": "maddress $                                        \tidentifier $", "contents": "maddress" }
    ,{ "trigger": "mask $                                            \tidentifier $", "contents": "mask" }
    ,{ "trigger": "matchkey $                                        \tidentifier $", "contents": "matchkey" }
    ,{ "trigger": "matchtok $                                        \tidentifier $", "contents": "matchtok" }
    ,{ "trigger": "matchtokcs $                                      \tidentifier $", "contents": "matchtokcs" }
    ,{ "trigger": "md5 $                                             \tidentifier $", "contents": "md5" }
    ,{ "trigger": "me $                                              \tidentifier $", "contents": "me" }
    ,{ "trigger": "menu $                                            \tidentifier $", "contents": "menu" }
    ,{ "trigger": "menubar $                                         \tidentifier $", "contents": "menubar" }
    ,{ "trigger": "menucontext $                                     \tidentifier $", "contents": "menucontext" }
    ,{ "trigger": "menutype $                                        \tidentifier $", "contents": "menutype" }
    ,{ "trigger": "mid $                                             \tidentifier $", "contents": "mid" }
    ,{ "trigger": "mididir $                                         \tidentifier $", "contents": "mididir" }
    ,{ "trigger": "mircdir $                                         \tidentifier $", "contents": "mircdir" }
    ,{ "trigger": "mircexe $                                         \tidentifier $", "contents": "mircexe" }
    ,{ "trigger": "mircini $                                         \tidentifier $", "contents": "mircini" }
    ,{ "trigger": "mkfn $                                            \tidentifier $", "contents": "mkfn" }
    ,{ "trigger": "mklogfn $                                         \tidentifier $", "contents": "mklogfn" }
    ,{ "trigger": "mknickfn $                                        \tidentifier $", "contents": "mknickfn" }
    ,{ "trigger": "mnick $                                           \tidentifier $", "contents": "mnick" }
    ,{ "trigger": "mode $                                            \tidentifier $", "contents": "mode" }
    ,{ "trigger": "modefirst $                                       \tidentifier $", "contents": "modefirst" }
    ,{ "trigger": "modelast $                                        \tidentifier $", "contents": "modelast" }
    ,{ "trigger": "modespl $                                         \tidentifier $", "contents": "modespl" }
    ,{ "trigger": "mouse $                                           \tidentifier $", "contents": "mouse" }
    ,{ "trigger": "mp3 $                                             \tidentifier $", "contents": "mp3" }
    ,{ "trigger": "mp3dir $                                          \tidentifier $", "contents": "mp3dir" }
    ,{ "trigger": "msfile $                                          \tidentifier $", "contents": "msfile" }
    ,{ "trigger": "msgstamp $                                        \tidentifier $", "contents": "msgstamp" }
    ,{ "trigger": "msgtags $                                         \tidentifier $", "contents": "msgtags" }
    ,{ "trigger": "naddress $                                        \tidentifier $", "contents": "naddress" }
    ,{ "trigger": "network $                                         \tidentifier $", "contents": "network" }
    ,{ "trigger": "newnick $                                         \tidentifier $", "contents": "newnick" }
    ,{ "trigger": "nhnick $                                          \tidentifier $", "contents": "nhnick" }
    ,{ "trigger": "nick $                                            \tidentifier $", "contents": "nick" }
    ,{ "trigger": "nickmode $                                        \tidentifier $", "contents": "nickmode" }
    ,{ "trigger": "no $                                              \tidentifier $", "contents": "no" }
    ,{ "trigger": "nofile $                                          \tidentifier $", "contents": "nofile" }
    ,{ "trigger": "nopath $                                          \tidentifier $", "contents": "nopath" }
    ,{ "trigger": "nopnick $                                         \tidentifier $", "contents": "nopnick" }
    ,{ "trigger": "noqt $                                            \tidentifier $", "contents": "noqt" }
    ,{ "trigger": "not $                                             \tidentifier $", "contents": "not" }
    ,{ "trigger": "notags $                                          \tidentifier $", "contents": "notags" }
    ,{ "trigger": "notify $                                          \tidentifier $", "contents": "notify" }
    ,{ "trigger": "null $                                            \tidentifier $", "contents": "null" }
    ,{ "trigger": "numeric $                                         \tidentifier $", "contents": "numeric" }
    ,{ "trigger": "numtok $                                          \tidentifier $", "contents": "numtok" }
    ,{ "trigger": "nvnick $                                          \tidentifier $", "contents": "nvnick" }
    ,{ "trigger": "ok $                                              \tidentifier $", "contents": "ok" }
    ,{ "trigger": "online $                                          \tidentifier $", "contents": "online" }
    ,{ "trigger": "onlineserver $                                    \tidentifier $", "contents": "onlineserver" }
    ,{ "trigger": "onlinetotal $                                     \tidentifier $", "contents": "onlinetotal" }
    ,{ "trigger": "onpoly $                                          \tidentifier $", "contents": "onpoly" }
    ,{ "trigger": "opnick $                                          \tidentifier $", "contents": "opnick" }
    ,{ "trigger": "or $                                              \tidentifier $", "contents": "or" }
    ,{ "trigger": "ord $                                             \tidentifier $", "contents": "ord" }
    ,{ "trigger": "os $                                              \tidentifier $", "contents": "os" }
    ,{ "trigger": "parms $                                           \tidentifier $", "contents": "parms" }
    ,{ "trigger": "parseline $                                       \tidentifier $", "contents": "parseline" }
    ,{ "trigger": "parsetype $                                       \tidentifier $", "contents": "parsetype" }
    ,{ "trigger": "parseutf $                                        \tidentifier $", "contents": "parseutf" }
    ,{ "trigger": "passivedcc $                                      \tidentifier $", "contents": "passivedcc" }
    ,{ "trigger": "pi $                                              \tidentifier $", "contents": "pi" }
    ,{ "trigger": "pic $                                             \tidentifier $", "contents": "pic" }
    ,{ "trigger": "play $                                            \tidentifier $", "contents": "play" }
    ,{ "trigger": "pnick $                                           \tidentifier $", "contents": "pnick" }
    ,{ "trigger": "portable $                                        \tidentifier $", "contents": "portable" }
    ,{ "trigger": "portfree $                                        \tidentifier $", "contents": "portfree" }
    ,{ "trigger": "pos $                                             \tidentifier $", "contents": "pos" }
    ,{ "trigger": "poscs $                                           \tidentifier $", "contents": "poscs" }
    ,{ "trigger": "prefix $                                          \tidentifier $", "contents": "prefix" }
    ,{ "trigger": "prop $                                            \tidentifier $", "contents": "prop" }
    ,{ "trigger": "protect $                                         \tidentifier $", "contents": "protect" }
    ,{ "trigger": "puttok $                                          \tidentifier $", "contents": "puttok" }
    ,{ "trigger": "qt $                                              \tidentifier $", "contents": "qt" }
    ,{ "trigger": "query $                                           \tidentifier $", "contents": "query" }
    ,{ "trigger": "r $                                               \tidentifier $", "contents": "r" }
    ,{ "trigger": "raddress $                                        \tidentifier $", "contents": "raddress" }
    ,{ "trigger": "rand $                                            \tidentifier $", "contents": "rand" }
    ,{ "trigger": "rawbytes $                                        \tidentifier $", "contents": "rawbytes" }
    ,{ "trigger": "rawmsg $                                          \tidentifier $", "contents": "rawmsg" }
    ,{ "trigger": "read $                                            \tidentifier $", "contents": "read" }
    ,{ "trigger": "readini $                                         \tidentifier $", "contents": "readini" }
    ,{ "trigger": "readn $                                           \tidentifier $", "contents": "readn" }
    ,{ "trigger": "regbr $                                           \tidentifier $", "contents": "regbr" }
    ,{ "trigger": "regerrstr $                                       \tidentifier $", "contents": "regerrstr" }
    ,{ "trigger": "regex $                                           \tidentifier $", "contents": "regex" }
    ,{ "trigger": "regml $                                           \tidentifier $", "contents": "regml" }
    ,{ "trigger": "regmlex $                                         \tidentifier $", "contents": "regmlex" }
    ,{ "trigger": "regsub $                                          \tidentifier $", "contents": "regsub" }
    ,{ "trigger": "regsubex $                                        \tidentifier $", "contents": "regsubex" }
    ,{ "trigger": "remote $                                          \tidentifier $", "contents": "remote" }
    ,{ "trigger": "remove $                                          \tidentifier $", "contents": "remove" }
    ,{ "trigger": "removecs $                                        \tidentifier $", "contents": "removecs" }
    ,{ "trigger": "remtok $                                          \tidentifier $", "contents": "remtok" }
    ,{ "trigger": "remtokcs $                                        \tidentifier $", "contents": "remtokcs" }
    ,{ "trigger": "replace $                                         \tidentifier $", "contents": "replace" }
    ,{ "trigger": "replacecs $                                       \tidentifier $", "contents": "replacecs" }
    ,{ "trigger": "replacex $                                        \tidentifier $", "contents": "replacex" }
    ,{ "trigger": "replacexcs $                                      \tidentifier $", "contents": "replacexcs" }
    ,{ "trigger": "reptok $                                          \tidentifier $", "contents": "reptok" }
    ,{ "trigger": "reptokcs $                                        \tidentifier $", "contents": "reptokcs" }
    ,{ "trigger": "result $                                          \tidentifier $", "contents": "result" }
    ,{ "trigger": "rgb $                                             \tidentifier $", "contents": "rgb" }
    ,{ "trigger": "right $                                           \tidentifier $", "contents": "right" }
    ,{ "trigger": "rnick $                                           \tidentifier $", "contents": "rnick" }
    ,{ "trigger": "round $                                           \tidentifier $", "contents": "round" }
    ,{ "trigger": "samepath $                                        \tidentifier $", "contents": "samepath" }
    ,{ "trigger": "scid $                                            \tidentifier $", "contents": "scid" }
    ,{ "trigger": "scon $                                            \tidentifier $", "contents": "scon" }
    ,{ "trigger": "script $                                          \tidentifier $", "contents": "script" }
    ,{ "trigger": "scriptdir $                                       \tidentifier $", "contents": "scriptdir" }
    ,{ "trigger": "scriptline $                                      \tidentifier $", "contents": "scriptline" }
    ,{ "trigger": "sdir $                                            \tidentifier $", "contents": "sdir" }
    ,{ "trigger": "send $                                            \tidentifier $", "contents": "send" }
    ,{ "trigger": "server $                                          \tidentifier $", "contents": "server" }
    ,{ "trigger": "serverip $                                        \tidentifier $", "contents": "serverip" }
    ,{ "trigger": "servertarget $                                    \tidentifier $", "contents": "servertarget" }
    ,{ "trigger": "sfile $                                           \tidentifier $", "contents": "sfile" }
    ,{ "trigger": "sha1 $                                            \tidentifier $", "contents": "sha1" }
    ,{ "trigger": "sha256 $                                          \tidentifier $", "contents": "sha256" }
    ,{ "trigger": "sha384 $                                          \tidentifier $", "contents": "sha384" }
    ,{ "trigger": "sha512 $                                          \tidentifier $", "contents": "sha512" }
    ,{ "trigger": "shortfn $                                         \tidentifier $", "contents": "shortfn" }
    ,{ "trigger": "show $                                            \tidentifier $", "contents": "show" }
    ,{ "trigger": "signal $                                          \tidentifier $", "contents": "signal" }
    ,{ "trigger": "sin $                                             \tidentifier $", "contents": "sin" }
    ,{ "trigger": "sinh $                                            \tidentifier $", "contents": "sinh" }
    ,{ "trigger": "site $                                            \tidentifier $", "contents": "site" }
    ,{ "trigger": "sline $                                           \tidentifier $", "contents": "sline" }
    ,{ "trigger": "snick $                                           \tidentifier $", "contents": "snick" }
    ,{ "trigger": "snicks $                                          \tidentifier $", "contents": "snicks" }
    ,{ "trigger": "snotify $                                         \tidentifier $", "contents": "snotify" }
    ,{ "trigger": "sock $                                            \tidentifier $", "contents": "sock" }
    ,{ "trigger": "sockbr $                                          \tidentifier $", "contents": "sockbr" }
    ,{ "trigger": "sockerr $                                         \tidentifier $", "contents": "sockerr" }
    ,{ "trigger": "sockname $                                        \tidentifier $", "contents": "sockname" }
    ,{ "trigger": "sorttok $                                         \tidentifier $", "contents": "sorttok" }
    ,{ "trigger": "sorttokcs $                                       \tidentifier $", "contents": "sorttokcs" }
    ,{ "trigger": "sound $                                           \tidentifier $", "contents": "sound" }
    ,{ "trigger": "speak $                                           \tidentifier $", "contents": "speak" }
    ,{ "trigger": "sqrt $                                            \tidentifier $", "contents": "sqrt" }
    ,{ "trigger": "sreq $                                            \tidentifier $", "contents": "sreq" }
    ,{ "trigger": "ssl $                                             \tidentifier $", "contents": "ssl" }
    ,{ "trigger": "sslcertsha1 $                                     \tidentifier $", "contents": "sslcertsha1" }
    ,{ "trigger": "sslcertsha256 $                                   \tidentifier $", "contents": "sslcertsha256" }
    ,{ "trigger": "ssldll $                                          \tidentifier $", "contents": "ssldll" }
    ,{ "trigger": "ssllibdll $                                       \tidentifier $", "contents": "ssllibdll" }
    ,{ "trigger": "sslready $                                        \tidentifier $", "contents": "sslready" }
    ,{ "trigger": "sslversion $                                      \tidentifier $", "contents": "sslversion" }
    ,{ "trigger": "starting $                                        \tidentifier $", "contents": "starting" }
    ,{ "trigger": "status $                                          \tidentifier $", "contents": "status" }
    ,{ "trigger": "str $                                             \tidentifier $", "contents": "str" }
    ,{ "trigger": "strip $                                           \tidentifier $", "contents": "strip" }
    ,{ "trigger": "stripped $                                        \tidentifier $", "contents": "stripped" }
    ,{ "trigger": "style $                                           \tidentifier $", "contents": "style" }
    ,{ "trigger": "submenu $                                         \tidentifier $", "contents": "submenu" }
    ,{ "trigger": "switchbar $                                       \tidentifier $", "contents": "switchbar" }
    ,{ "trigger": "sysdir $                                          \tidentifier $", "contents": "sysdir" }
    ,{ "trigger": "tan $                                             \tidentifier $", "contents": "tan" }
    ,{ "trigger": "tanh $                                            \tidentifier $", "contents": "tanh" }
    ,{ "trigger": "target $                                          \tidentifier $", "contents": "target" }
    ,{ "trigger": "tempfn $                                          \tidentifier $", "contents": "tempfn" }
    ,{ "trigger": "ticks $                                           \tidentifier $", "contents": "ticks" }
    ,{ "trigger": "time $                                            \tidentifier $", "contents": "time" }
    ,{ "trigger": "timeout $                                         \tidentifier $", "contents": "timeout" }
    ,{ "trigger": "timer $                                           \tidentifier $", "contents": "timer" }
    ,{ "trigger": "timestamp $                                       \tidentifier $", "contents": "timestamp" }
    ,{ "trigger": "timestampfmt $                                    \tidentifier $", "contents": "timestampfmt" }
    ,{ "trigger": "timezone $                                        \tidentifier $", "contents": "timezone" }
    ,{ "trigger": "tip $                                             \tidentifier $", "contents": "tip" }
    ,{ "trigger": "tips $                                            \tidentifier $", "contents": "tips" }
    ,{ "trigger": "titlebar $                                        \tidentifier $", "contents": "titlebar" }
    ,{ "trigger": "token $                                           \tidentifier $", "contents": "token" }
    ,{ "trigger": "toolbar $                                         \tidentifier $", "contents": "toolbar" }
    ,{ "trigger": "topic $                                           \tidentifier $", "contents": "topic" }
    ,{ "trigger": "totp $                                            \tidentifier $", "contents": "totp" }
    ,{ "trigger": "treebar $                                         \tidentifier $", "contents": "treebar" }
    ,{ "trigger": "true $                                            \tidentifier $", "contents": "true" }
    ,{ "trigger": "trust $                                           \tidentifier $", "contents": "trust" }
    ,{ "trigger": "ulevel $                                          \tidentifier $", "contents": "ulevel" }
    ,{ "trigger": "ulist $                                           \tidentifier $", "contents": "ulist" }
    ,{ "trigger": "unsafe $                                          \tidentifier $", "contents": "unsafe" }
    ,{ "trigger": "upper $                                           \tidentifier $", "contents": "upper" }
    ,{ "trigger": "uptime $                                          \tidentifier $", "contents": "uptime" }
    ,{ "trigger": "url $                                             \tidentifier $", "contents": "url" }
    ,{ "trigger": "usermode $                                        \tidentifier $", "contents": "usermode" }
    ,{ "trigger": "utfdecode $                                       \tidentifier $", "contents": "utfdecode" }
    ,{ "trigger": "utfencode $                                       \tidentifier $", "contents": "utfencode" }
    ,{ "trigger": "v1 $                                              \tidentifier $", "contents": "v1" }
    ,{ "trigger": "v2 $                                              \tidentifier $", "contents": "v2" }
    ,{ "trigger": "var $                                             \tidentifier $", "contents": "var" }
    ,{ "trigger": "vc $                                              \tidentifier $", "contents": "vc" }
    ,{ "trigger": "vcmd $                                            \tidentifier $", "contents": "vcmd" }
    ,{ "trigger": "vcmdstat $                                        \tidentifier $", "contents": "vcmdstat" }
    ,{ "trigger": "vcmdver $                                         \tidentifier $", "contents": "vcmdver" }
    ,{ "trigger": "version $                                         \tidentifier $", "contents": "version" }
    ,{ "trigger": "vnick $                                           \tidentifier $", "contents": "vnick" }
    ,{ "trigger": "vol $                                             \tidentifier $", "contents": "vol" }
    ,{ "trigger": "wavedir $                                         \tidentifier $", "contents": "wavedir" }
    ,{ "trigger": "wid $                                             \tidentifier $", "contents": "wid" }
    ,{ "trigger": "width $                                           \tidentifier $", "contents": "width" }
    ,{ "trigger": "wildsite $                                        \tidentifier $", "contents": "wildsite" }
    ,{ "trigger": "wildtok $                                         \tidentifier $", "contents": "wildtok" }
    ,{ "trigger": "wildtokcs $                                       \tidentifier $", "contents": "wildtokcs" }
    ,{ "trigger": "window $                                          \tidentifier $", "contents": "window" }
    ,{ "trigger": "wrap $                                            \tidentifier $", "contents": "wrap" }
    ,{ "trigger": "xor $                                             \tidentifier $", "contents": "xor" }
    ,{ "trigger": "yes $                                             \tidentifier $", "contents": "yes" }
  ]
}
