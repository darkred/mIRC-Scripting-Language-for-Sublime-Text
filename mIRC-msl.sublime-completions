/*
MIT License

Copyright (c) 2018 Evan Greene

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
{
  "scope": "source.msl - *",

  "completions":
  [
    // ###########################################################################################################################
    // mIRC Commands
    // ###########################################################################################################################
    { "trigger": " /abook           Display Address Book                           \tcommand /", "contents": "abook ${1:[ˇOptional: -chnw]}" }
    ,{ "trigger": " /action         Perform action in channel                      \tcommand /", "contents": "action ${1:<ˇRequired: message>}" }
    ,{ "trigger": " /ajinvite       Toggle auto-join on invite features            \tcommand /", "contents": "ajinvite ${1:<ˇRequired: on|off>}" }
    ,{ "trigger": " /alias          Add/Replace/Remove aliases.                    \tcommand /", "contents": "alias ${1:[ˇOptional: filename_of_loaded_alias]} ${2:<ˇRequired: alias_name>} ${3:[ˇOptional: command_or_blank_to_remove_alias)]}" }
    ,{ "trigger": " /aline          Add line of text to @window                    \tcommand /", "contents": "aline ${1:[ˇOptional: -sahpinl]} ${3:[ˇOptional: color_code]} @${4:<ˇRequired: name_of_window>} ${5:<ˇRequired: text>}" }
    ,{ "trigger": " /ame            Send action to all channels                    \tcommand /", "contents": "ame ${1:<ˇRequired: message>}" }
    ,{ "trigger": " /amsg           Send message to all channels                   \tcommand /", "contents": "amsg ${1:<ˇRequired: message>}" }
    ,{ "trigger": " /anick          Set alternate nickname                         \tcommand /", "contents": "anick ${1:<ˇRequired: nickname>}" }
    ,{ "trigger": " /aop            Turn on/off OR add to aop list                 \tcommand /", "contents": "aop ${1:<ˇRequired: on|off>} ${2:ˇORˇ [ˇOptional: -rw]} ${3:<ˇRequired: nick_or_address>} ${4:[ˇOptional: #channel1,#channel2...]} ${5:[ˇOptional: int_address_type]} ${6:[ˇOptional: string_network]}" }
    ,{ "trigger": " /auser          Add or edit user                               \tcommand /", "contents": "auser ${1:[ˇOptional -a match_existing_entry]} ${2:<ˇRequired: levels>} ${3:<ˇRequired: nick_or_address>} ${4:[ˇOptional: special_info_about_entry]}" }
    ,{ "trigger": " /aop            Turn on/off OR add to aop list                 \tcommand /", "contents": "auto ${1:<ˇRequired: on|off>} ${2:ˇORˇ [ˇOptional: -rw]} ${3:<ˇRequired: nick_or_address>} ${4:[ˇOptional: #channel1,#channel2...]} ${5:[ˇOptional: int_address_type]} ${6:[ˇOptional: string_network]}" }
    ,{ "trigger": " /autojoin       Autojoin used with \"on connect\" event        \tcommand /", "contents": "autojoin ${1:[ˇOptional: -nsdN]}" }
    ,{ "trigger": " /avoice         Turn on/off OR add to avoice list              \tcommand /", "contents": "avoice ${1:<ˇRequired: on|off>} ${2:ˇORˇ [ˇOptional: -rw]} ${3:<ˇRequired: nick_or_address>} ${4:[ˇOptional: #channel1,#channel2...]} ${5:[ˇOptional: int_address_type]} ${6:[ˇOptional: string_network]}" }
    ,{ "trigger": " /away           Set/Unset Away                                 \tcommand /", "contents": "away ${1:[ˇOptional: message_or_blank_to_unset]}" }
    ,{ "trigger": " /background     Set background                                 \tcommand /", "contents": "background ${1:<ˇRequired: -abemsgdluhcfnrtpx>} ${2:[ˇOptional: window]} ${3:[ˇOptional: \"filename\"]}" }
    ,{ "trigger": " /ban            Ban a user                                     \tcommand /", "contents": "ban ${1:[ˇOptional: -kruN]} ${2:[ˇOptional: #channel]} ${4:<ˇRequired: nickname_or_address>} ${5:[ˇOptional: int_address_type]} ${6:[ˇOptional: kick_message]}" }
    ,{ "trigger": " /bcopy          Copy bytes from &var to &var                   \tcommand /", "contents": "bcopy ${1:[ˇOptional: -zc]} ${2:<ˇRequired: &dest_binvar>} ${3:<ˇRequired: int_destination_pos>} ${4:<ˇRequired: &src_binvar>} ${5:<ˇRequired: int_source_pos>} ${6:<ˇRequired: int_numBytes>}" }
    ,{ "trigger": " /beep           Generate speaker beep                          \tcommand /", "contents": "beep ${1:[ˇOptional: int_number_times]} ${2:[ˇOptional: int_delay_in_seconds]}" }
    ,{ "trigger": " /bindip         Set IP binding on/off                          \tcommand /", "contents": "bindip ${1:on <ˇRequired: IP_or_Adapter>} ${2:ˇORˇ ˇOptional: on|off]}" }
    ,{ "trigger": " /bread          Read bytes from file into &var                 \tcommand /", "contents": "bread ${1:[ˇOptional]: -t]} ${2:<ˇRequired: \"filename\">} ${3:<ˇRequired: int_byte_start_pos>} ${4:<ˇRequired: int_num_bytes_to_read>} ${5:<ˇRequired: variable_to_store_in>}" }
    ,{ "trigger": " /break          Terminate execution of nearest loop            \tcommand /", "contents": "break" }
    ,{ "trigger": " /breplace       Replace ascii var with binary var              \tcommand /", "contents": "breplace ${1:<ˇRequired: &binvar>} ${2:<ˇRequired: old_value>} ${3:<ˇRequired: new_value>} ${4:[ˇOptional: old_value new_value ...]}" }
    ,{ "trigger": " /bset           Set binary global variable                     \tcommand /", "contents": "bset ${1:[ˇOptional: -tac]} ${2:<ˇRequired: &binvar>} ${3:<ˇRequired: int_pos>} ${4:<ˇRequired: ascii/string>} ${5:[ˇOptional: asci/string asci/string ...]}" }
    ,{ "trigger": " /btrunc         Truncate file to specified bytesize            \tcommand /", "contents": "btrunc ${1:<ˇRequired: \"filename\">} ${2:<ˇRequired: int_bytes>}" }
    ,{ "trigger": " /bunset         Unset binary global variable                   \tcommand /", "contents": "bunset ${1:<ˇRequired: &binvar>} ${2:[ˇOptional: &binvar &binvar ...]}" }
    ,{ "trigger": " /bwrite         Write binary data to file                      \tcommand /", "contents": "bwrite ${1:[ˇOptional: -act]} ${2:<ˇRequired: \"filename\">} ${3:<ˇRequired: int_start_pos>} ${4:ˇRequired: int_length>} ${5:<ˇRequired: text|%var|&binvar>}" }
    ,{ "trigger": " /channel        Open channel central                           \tcommand /", "contents": "channel" }
    ,{ "trigger": " /clear          Clear buffer of window                         \tcommand /", "contents": "clear" }
    ,{ "trigger": " /clearall       Clear buffer of all windows                    \tcommand /", "contents": "clearall" }
    ,{ "trigger": " /clearial       Clear IAL                                      \tcommand /", "contents": "clearial" }
    ,{ "trigger": " /cline          Set color of line in nicklist or @window       \tcommand /", "contents": "cline" }
    ,{ "trigger": " /clipboard      Copy text to clipboard                         \tcommand /", "contents": "clipboard" }
    ,{ "trigger": " /close          Close windows of specified type                \tcommand /", "contents": "close" }
    ,{ "trigger": " /closechats     Close all inactive DCC Chat windows            \tcommand /", "contents": "closechats" }
    ,{ "trigger": " /closedccs      Close all inactive DCC Send/Get windows        \tcommand /", "contents": "closedccs" }
    ,{ "trigger": " /closefserves   Close all inactive Fserve windows              \tcommand /", "contents": "closefserves" }
    ,{ "trigger": " /closemsg       Close all or specified query window            \tcommand /", "contents": "closemsg" }
    ,{ "trigger": " /cnick          Set color options for nick in addressbook      \tcommand /", "contents": "cnick" }
    ,{ "trigger": " /color          Set color setting (same as /colour)            \tcommand /", "contents": "color" }
    ,{ "trigger": " /colour         Set color setting (same as /color)             \tcommand /", "contents": "colour" }
    ,{ "trigger": " /comclose       Close an existing COM connection               \tcommand /", "contents": "comclose" }
    ,{ "trigger": " /comlist        Get list of all open COM object connections    \tcommand /", "contents": "comlist" }
    // DEPRECATED/REMOVED: ,{ "trigger": " /commands                               \tcommand /", "contents": "commands" }
    ,{ "trigger": " /comopen        Open a com connection                          \tcommand /", "contents": "comopen" }
    ,{ "trigger": " /comreg         Register/Unregister a COM with windows         \tcommand /", "contents": "comreg" }
    ,{ "trigger": " /continue       Jump to beginning of a loop                    \tcommand /", "contents": "continue" }
    ,{ "trigger": " /copy           Copy source dir/file to destination            \tcommand /", "contents": "copy" }
    ,{ "trigger": " /creq           Modify DCC Chat options                        \tcommand /", "contents": "creq" }
    ,{ "trigger": " /ctcp           Send a CTCP request                            \tcommand /", "contents": "ctcp" }
    ,{ "trigger": " /ctcpreply      Send a CTCP reply                              \tcommand /", "contents": "ctcpreply" }
    ,{ "trigger": " /ctcps          Set or display status of CTCP event processing \tcommand /", "contents": "ctcps" }
    ,{ "trigger": " /dcc            Send DCC request                               \tcommand /", "contents": "dcc" }
    ,{ "trigger": " /dccserver      Turn DCC server on/off                         \tcommand /", "contents": "dccserver" }
    ,{ "trigger": " /dde            Create DDE connection                          \tcommand /", "contents": "dde" }
    ,{ "trigger": " /ddeserver      Turn DDE server on/off                         \tcommand /", "contents": "ddeserver" }
    ,{ "trigger": " /debug          Output raw server messages to file/window      \tcommand /", "contents": "debug" }
    ,{ "trigger": " /dec            Decrease variable by N amount                  \tcommand /", "contents": "dec" }
    ,{ "trigger": " /describe       Send action to channel/person (also see /me)   \tcommand /", "contents": "describe" }
    ,{ "trigger": " /dialog         Create a dialog window                         \tcommand /", "contents": "dialog" }
    ,{ "trigger": " /did            Modify dialog controls                         \tcommand /", "contents": "did" }
    ,{ "trigger": " /didtok         Add list of values to a dialog control         \tcommand /", "contents": "didtok" }
    ,{ "trigger": " /disable        Disable a #group in all scripts                \tcommand /", "contents": "disable" }
    ,{ "trigger": " /disconnect     Disconnect from current server                 \tcommand /", "contents": "disconnect" }
    ,{ "trigger": " /dlevel         Set default userlevel for everyone             \tcommand /", "contents": "dlevel" }
    ,{ "trigger": " /dline          Delete line from a @window                     \tcommand /", "contents": "dline" }
    ,{ "trigger": " /dll            Call a function from a .DLL file               \tcommand /", "contents": "dll" }
    ,{ "trigger": " /dns            Perform DNS lookup on a user/address           \tcommand /", "contents": "dns" }
    ,{ "trigger": " /dqwindow       Enable/Disable/Show/Hide Dedicated query window\tcommand /", "contents": "dqwindow" }
    ,{ "trigger": " /drawcopy       Copy part of picture to different position in @window\tcommand /", "contents": "drawcopy" }
    ,{ "trigger": " /drawdot        Draw dot in @window                            \tcommand /", "contents": "drawdot" }
    ,{ "trigger": " /drawfill       Draw and fill an area in @window               \tcommand /", "contents": "drawfill" }
    ,{ "trigger": " /drawline       Draw line in @window                           \tcommand /", "contents": "drawline" }
    ,{ "trigger": " /drawpic        Draw picture in @window                        \tcommand /", "contents": "drawpic" }
    ,{ "trigger": " /drawrect       Draw rectangle in @window                      \tcommand /", "contents": "drawrect" }
    ,{ "trigger": " /drawreplace    Replace color1 with color2 in @window          \tcommand /", "contents": "drawreplace" }
    ,{ "trigger": " /drawrot        Rotate area of bitmap in @window               \tcommand /", "contents": "drawrot" }
    ,{ "trigger": " /drawsave       Save picture in @window to a file              \tcommand /", "contents": "drawsave" }
    ,{ "trigger": " /drawscroll     Scroll region in @window                       \tcommand /", "contents": "drawscroll" }
    ,{ "trigger": " /drawsize       Extend bitmap size of @window                  \tcommand /", "contents": "drawsize" }
    ,{ "trigger": " /drawtext       Draw text inside @window                       \tcommand /", "contents": "drawtext" }
    ,{ "trigger": " /ebeeps         Enable/Disable 'event beeps' sound             \tcommand /", "contents": "ebeeps" }
    ,{ "trigger": " /echo           Print text to a channel or @window             \tcommand /", "contents": "echo" }
    ,{ "trigger": " /editbox        Set text inside of editbox to a value          \tcommand /", "contents": "editbox" }
    ,{ "trigger": " /else           Logical construct used in IF statements        \tcommand /", "contents": "else" }
    ,{ "trigger": " /elseif         Logical construct used in IF statements        \tcommand /", "contents": "elseif" }
    ,{ "trigger": " /emailaddr      Modify email address shown in connect dialog   \tcommand /", "contents": "emailaddr" }
    ,{ "trigger": " /enable         Enable a #group in all scripts                 \tcommand /", "contents": "enable" }
    ,{ "trigger": " /events         Enable/Disable remote events processing        \tcommand /", "contents": "events" }
    ,{ "trigger": " /exit           Exit mIRC                                      \tcommand /", "contents": "exit" }
    ,{ "trigger": " /fclose         Close file open window triggered from /fopen   \tcommand /", "contents": "fclose" }
    ,{ "trigger": " /filter         Scan src for *matchtext* and output it to dst  \tcommand /", "contents": "filter" }
    ,{ "trigger": " /findtext       Search active window for text                  \tcommand /", "contents": "findtext" }
    ,{ "trigger": " /finger         Send finger request to nick                    \tcommand /", "contents": "finger" }
    ,{ "trigger": " /firewall       Set mIRC firewall settings                     \tcommand /", "contents": "firewall" }
    ,{ "trigger": " /flash          Flash mIRC titlebar/tray                       \tcommand /", "contents": "flash" }
    ,{ "trigger": " /flist          List all or matching files that are /fopen     \tcommand /", "contents": "flist" }
    ,{ "trigger": " /flood          Set mIRC flood settings                        \tcommand /", "contents": "flood" }
    ,{ "trigger": " /flush          Clear user list of invalid nicknames           \tcommand /", "contents": "flush" }
    ,{ "trigger": " /flushini       Flush INI file to hard disk                    \tcommand /", "contents": "flushini" }
    ,{ "trigger": " /fnord          Easter Egg: Echos \"Nothing to see here\"      \tcommand /", "contents": "fnord" }
    ,{ "trigger": " /font           Set font of current window                     \tcommand /", "contents": "font" }
    ,{ "trigger": " /fopen          Open a filename with a handle                  \tcommand /", "contents": "fopen" }
    ,{ "trigger": " /fseek          Set pointer in fopen handle to a position      \tcommand /", "contents": "fseek" }
    ,{ "trigger": " /fsend          Display or set dcc send on/off                 \tcommand /", "contents": "fsend" }
    ,{ "trigger": " /fserve         Initiate DCC fileserver with user              \tcommand /", "contents": "fserve" }
    ,{ "trigger": " /fullname       Change fullname shown in connect dialog        \tcommand /", "contents": "fullname" }
    ,{ "trigger": " /fupdate        Set delay for window/channel text refresh      \tcommand /", "contents": "fupdate" }
    ,{ "trigger": " /fwrite         Write text or binvar to a file fopen handle    \tcommand /", "contents": "fwrite" }
    ,{ "trigger": " /ghide          Hides a previously loaded agent                \tcommand /", "contents": "ghide" }
    ,{ "trigger": " /gload          Load an agent                                  \tcommand /", "contents": "gload" }
    ,{ "trigger": " /gmove          Moves an agent                                 \tcommand /", "contents": "gmove" }
    ,{ "trigger": " /gopts          Set options of a loaded agent                  \tcommand /", "contents": "gopts" }
    ,{ "trigger": " /goto           Jump to a section in code or loop              \tcommand /", "contents": "goto" }
    ,{ "trigger": " /gplay          Make agent play an animation                   \tcommand /", "contents": "gplay" }
    ,{ "trigger": " /gpoint         Make agent point to position                   \tcommand /", "contents": "gpoint" }
    ,{ "trigger": " /gqreq          Enable/Disable agent command queueing          \tcommand /", "contents": "gqreq" }
    ,{ "trigger": " /groups         Display a list of #groups                      \tcommand /", "contents": "groups" }
    ,{ "trigger": " /gshow          Display an agent                               \tcommand /", "contents": "gshow" }
    ,{ "trigger": " /gsize          Resize an agent                                \tcommand /", "contents": "gsize" }
    ,{ "trigger": " /gstop          Stop and remove all command queue from agent   \tcommand /", "contents": "gstop" }
    ,{ "trigger": " /gtalk          Make agent speak text                          \tcommand /", "contents": "gtalk" }
    ,{ "trigger": " /gunload        Unload an agent                                \tcommand /", "contents": "gunload" }
    ,{ "trigger": " /guser          Look up address of nick and add to userlist    \tcommand /", "contents": "guser" }
    ,{ "trigger": " /hadd           Insert key/value pair to hash table            \tcommand /", "contents": "hadd" }
    ,{ "trigger": " /halt           Immediately stop further processing script     \tcommand /", "contents": "halt" }
    ,{ "trigger": " /haltdef        Stop default processing of an event            \tcommand /", "contents": "haltdef" }
    ,{ "trigger": " /hdec           Decrement value in a hash table                \tcommand /", "contents": "hdec" }
    ,{ "trigger": " /hdel           Delete key/value pair in hash table            \tcommand /", "contents": "hdel" }
    ,{ "trigger": " /help           Display mIRC helpfile                          \tcommand /", "contents": "help" }
    ,{ "trigger": " /hfree          Free/Destroy a hash table                      \tcommand /", "contents": "hfree" }
    ,{ "trigger": " /hinc           Increment value in a hash table                \tcommand /", "contents": "hinc" }
    ,{ "trigger": " /hload          Load text file into already created hash table \tcommand /", "contents": "hload" }
    ,{ "trigger": " /hmake          Create a hash table                            \tcommand /", "contents": "hmake" }
    ,{ "trigger": " /hop            Part and join channel in single command        \tcommand /", "contents": "hop" }
    ,{ "trigger": " /hotlink        Override popups menu on right clicking word    \tcommand /", "contents": "hotlink" }
    ,{ "trigger": " /hsave          Save a hash table to a file                    \tcommand /", "contents": "hsave" }
    ,{ "trigger": " /ial            Set Internal-Address-List on/off               \tcommand /", "contents": "ial" }
    ,{ "trigger": " /ialclear       Clear Interal-Address-List data                \tcommand /", "contents": "ialclear" }
    ,{ "trigger": " /ialmark        Mark an IAL entry with a value                 \tcommand /", "contents": "ialmark" }
    ,{ "trigger": " /identd         Enable/disable built-in identd server          \tcommand /", "contents": "identd" }
    ,{ "trigger": " /if             Logical condition operation used in scripts    \tcommand /", "contents": "if" }
    ,{ "trigger": " /ignore         Ignore a user/address                          \tcommand /", "contents": "ignore" }
    ,{ "trigger": " /iline          Insert line into @window                       \tcommand /", "contents": "iline" }
    ,{ "trigger": " /inc            Increment variable by N amount                 \tcommand /", "contents": "inc" }
    ,{ "trigger": " /iuser          Set or remove info line in userlist            \tcommand /", "contents": "iuser" }
    ,{ "trigger": " /leave          Leave/part a channel (same as /part)           \tcommand /", "contents": "leave" }
    ,{ "trigger": " /linesep        Print line separator at a specified target     \tcommand /", "contents": "linesep" }
    ,{ "trigger": " /links          Display servers that are linked to current server\tcommand /", "contents": "links" }
    ,{ "trigger": " /list           Display channel list                           \tcommand /", "contents": "list" }
    ,{ "trigger": " /load           Load a script file                             \tcommand /", "contents": "load" }
    ,{ "trigger": " /loadbuf        Load buffer from filename to channel/@window   \tcommand /", "contents": "loadbuf" }
    ,{ "trigger": " /localinfo      Looks up and sets local settings               \tcommand /", "contents": "localinfo" }
    ,{ "trigger": " /log            Turn on/off logging to a file                  \tcommand /", "contents": "log" }
    ,{ "trigger": " /logview        Display text file in mIRC                      \tcommand /", "contents": "logview" }
    ,{ "trigger": " /maxdepth       Set max recursion limit for alias              \tcommand /", "contents": "maxdepth" }
    ,{ "trigger": " /mdi            Arrange MDI windows in tile or cascade         \tcommand /", "contents": "mdi" }
    ,{ "trigger": " /me             Send action to channel/person                  \tcommand /", "contents": "me" }
    ,{ "trigger": " /menubar        Turn on/off or display menubar status          \tcommand /", "contents": "menubar" }
    ,{ "trigger": " /mkdir          Creates a new directory                        \tcommand /", "contents": "mkdir" }
    ,{ "trigger": " /mnick          Change main nickname                           \tcommand /", "contents": "mnick" }
    ,{ "trigger": " /mode           Change mode for nick/channel                   \tcommand /", "contents": "mode" }
    ,{ "trigger": " /msg            Send message to channel/person                 \tcommand /", "contents": "msg" }
    ,{ "trigger": " /noop           Discard/no operation                           \tcommand /", "contents": "noop" }
    ,{ "trigger": " /notify         Manage the notify feature                      \tcommand /", "contents": "notify" }
    ,{ "trigger": " /omsg           Broadcast message to OPs on chans you are an OP\tcommand /", "contents": "omsg" }
    ,{ "trigger": " /onotice        Broadcast notice to OPs on chans you are an OP \tcommand /", "contents": "onotice" }
    ,{ "trigger": " /parseline      Inject text as if they are being sent/received \tcommand /", "contents": "parseline" }
    ,{ "trigger": " /part           Leave/part a channel                           \tcommand /", "contents": "part" }
    ,{ "trigger": " /partall        Leave/part all channels                        \tcommand /", "contents": "partall" }
    ,{ "trigger": " /pdcc           Send DCC packets without waiting for acks      \tcommand /", "contents": "pdcc" }
    ,{ "trigger": " /perform        Enable/disable perform section in options      \tcommand /", "contents": "perform" }
    ,{ "trigger": " /play           Output contents of a file to channel/user      \tcommand /", "contents": "play" }
    ,{ "trigger": " /playctrl       Open Play Central window                       \tcommand /", "contents": "playctrl" }
    ,{ "trigger": " /pop            Perform delayed op on a user                   \tcommand /", "contents": "pop" }
    ,{ "trigger": " /protect        Manage the built-in protect list               \tcommand /", "contents": "protect" }
    ,{ "trigger": " /proxy          Change firewall settings                       \tcommand /", "contents": "proxy" }
    ,{ "trigger": " /pvoice         Perform delayed voice on a user                \tcommand /", "contents": "pvoice" }
    ,{ "trigger": " /qme            Send action to all query windows               \tcommand /", "contents": "qme" }
    ,{ "trigger": " /qmsg           Send message to all query windows              \tcommand /", "contents": "qmsg" }
    ,{ "trigger": " /query          Open query window for online/offline user      \tcommand /", "contents": "query" }
    ,{ "trigger": " /queryrn        Change nickname of open query window           \tcommand /", "contents": "queryrn" }
    ,{ "trigger": " /quit           Disconnect from IRC                            \tcommand /", "contents": "quit" }
    ,{ "trigger": " /quote          Send raw message to server (use /raw instead)  \tcommand /", "contents": "quote" }
    ,{ "trigger": " /raw            Send a raw message to server                   \tcommand /", "contents": "raw" }
    ,{ "trigger": " /registration   Open the mIRC registration (enter serial #)    \tcommand /", "contents": "registration" }
    ,{ "trigger": " /reload         Reload a script file without triggering load event\tcommand /", "contents": "reload" }
    ,{ "trigger": " /remini         Delete section or item from INI file           \tcommand /", "contents": "remini" }
    ,{ "trigger": " /remote         Toggle remote, CTCPS, and raw events processing\tcommand /", "contents": "remote" }
    ,{ "trigger": " /remove         Delete a file                                  \tcommand /", "contents": "remove" }
    ,{ "trigger": " /rename         Rename a file                                  \tcommand /", "contents": "rename" }
    ,{ "trigger": " /renwin         Rename a @window                               \tcommand /", "contents": "renwin" }
    ,{ "trigger": " /reseterror     Reset error catches with :error label          \tcommand /", "contents": "reseterror" }
    ,{ "trigger": " /resetidle      Reset $idle to 0                               \tcommand /", "contents": "resetidle" }
    ,{ "trigger": " /return         Return a value and exit subroutine             \tcommand /", "contents": "return" }
    ,{ "trigger": " /returnex       Return a value (if exist) and exit subroutine  \tcommand /", "contents": "returnex" }
    ,{ "trigger": " /rlevel         Remove users with specified level from userlist\tcommand /", "contents": "rlevel" }
    ,{ "trigger": " /rline          Replace line in @window                        \tcommand /", "contents": "rline" }
    ,{ "trigger": " /rmdir          Delete empty directory (error if nonempty)     \tcommand /", "contents": "rmdir" }
    ,{ "trigger": " /run            Execute a file with default application        \tcommand /", "contents": "run" }
    ,{ "trigger": " /ruser          Remove a user or level from a user             \tcommand /", "contents": "ruser" }
    ,{ "trigger": " /save           Save popups/users/variables to file            \tcommand /", "contents": "save" }
    ,{ "trigger": " /savebuf        Save buffer to a file                          \tcommand /", "contents": "savebuf" }
    ,{ "trigger": " /saveini        Save or overwrite ini file to disk             \tcommand /", "contents": "saveini" }
    ,{ "trigger": " /say            Send message to current channel/window         \tcommand /", "contents": "say" }
    ,{ "trigger": " /scid           Set associated context of script/command to cid\tcommand /", "contents": "scid" }
    ,{ "trigger": " /scon           Set associated context of script/command to Nth window\tcommand /", "contents": "scon" }
    ,{ "trigger": " /server         Connect to a server                            \tcommand /", "contents": "server" }
    ,{ "trigger": " /set            Set a %variable to a value                     \tcommand /", "contents": "set" }
    ,{ "trigger": " /setlayer       Set transparency of a window                   \tcommand /", "contents": "setlayer" }
    ,{ "trigger": " /showmirc       Manipulate main mIRC window                    \tcommand /", "contents": "showmirc" }
    ,{ "trigger": " /signal         Send signal to all loaded scripts              \tcommand /", "contents": "signal" }
    ,{ "trigger": " /sline          Select line(s) in @window                      \tcommand /", "contents": "sline" }
    ,{ "trigger": " /sockaccept     Accept a connection to a /socklisten port      \tcommand /", "contents": "sockaccept" }
    ,{ "trigger": " /sockclose      Close a connection of /socklisten              \tcommand /", "contents": "sockclose" }
    ,{ "trigger": " /socklist       Display list all open sockets                  \tcommand /", "contents": "socklist" }
    ,{ "trigger": " /socklisten     Listen on a port for connections               \tcommand /", "contents": "socklisten" }
    ,{ "trigger": " /sockmark       Assign data to a socket for later reference    \tcommand /", "contents": "sockmark" }
    ,{ "trigger": " /sockopen       Open a connection to ip/host:port              \tcommand /", "contents": "sockopen" }
    ,{ "trigger": " /sockpause      Pause or restarted socket when reading data    \tcommand /", "contents": "sockpause" }
    ,{ "trigger": " /sockread       Read bytes from socket into variable           \tcommand /", "contents": "sockread" }
    ,{ "trigger": " /sockrename     Rename an existing socket connection           \tcommand /", "contents": "sockrename" }
    ,{ "trigger": " /sockudp        Send UDP data to ip/host:port of a /sockopen   \tcommand /", "contents": "sockudp" }
    ,{ "trigger": " /sockwrite      Send TCP data to ip/host:port of a /sockopen   \tcommand /", "contents": "sockwrite" }
    ,{ "trigger": " /sound          Send sound command to nick/channel             \tcommand /", "contents": "sound" }
    ,{ "trigger": " /speak          Speak text audibly                             \tcommand /", "contents": "speak" }
    ,{ "trigger": " /splay          Play an audio file                             \tcommand /", "contents": "splay" }
    ,{ "trigger": " /sreq           Modify mIRC DCC send options                   \tcommand /", "contents": "sreq" }
    ,{ "trigger": " /strip          Strip control-codes from text                  \tcommand /", "contents": "strip" }
    ,{ "trigger": " /switchbar      Set switchbar on/off or display current status \tcommand /", "contents": "switchbar" }
    ,{ "trigger": " /timer          Create a timer to execute code                 \tcommand /", "contents": "timer" }
    ,{ "trigger": " /timestamp      Enable/Disable timestamps or set format        \tcommand /", "contents": "timestamp" }
    ,{ "trigger": " /tip            Change text of active balloon tip or close     \tcommand /", "contents": "tip" }
    ,{ "trigger": " /tips           Enable/disable tips options                    \tcommand /", "contents": "tips" }
    ,{ "trigger": " /titlebar       Change titlebar of mIRC window or @window      \tcommand /", "contents": "titlebar" }
    ,{ "trigger": " /tnick          Change IRC nick without changing main/alt nick \tcommand /", "contents": "tnick" }
    ,{ "trigger": " /tokenize       Create tokenize values for $1, $2, etc.        \tcommand /", "contents": "tokenize" }
    ,{ "trigger": " /toolbar        Modify toolbar                                 \tcommand /", "contents": "toolbar" }
    ,{ "trigger": " /tray           Modify tray settings                           \tcommand /", "contents": "tray" }
    ,{ "trigger": " /treebar        Enable/Disable treebar                         \tcommand /", "contents": "treebar" }
    ,{ "trigger": " /ulist          Display list levels of users based on criteria \tcommand /", "contents": "ulist" }
    ,{ "trigger": " /unload         Unload a script                                \tcommand /", "contents": "unload" }
    ,{ "trigger": " /unset          Unset/delete a %variable                       \tcommand /", "contents": "unset" }
    ,{ "trigger": " /unsetall       Unset/delete all %variables                    \tcommand /", "contents": "unsetall" }
    ,{ "trigger": " /updatenl       Force update of IAL                            \tcommand /", "contents": "updatenl" }
    ,{ "trigger": " /url            Enable/disable URL catcher or open URL         \tcommand /", "contents": "url" }
    ,{ "trigger": " /username       Modify current username or display current     \tcommand /", "contents": "username" }
    ,{ "trigger": " /uwho           Lookup and display userinfo in address book    \tcommand /", "contents": "uwho" }
    ,{ "trigger": " /var            Create/replace local scope variables           \tcommand /", "contents": "var" }
    ,{ "trigger": " /vcadd          Add voice command for Speech Software          \tcommand /", "contents": "vcadd" }
    ,{ "trigger": " /vcmd           Enable voice commands for Speech Software      \tcommand /", "contents": "vcmd" }
    ,{ "trigger": " /vcrem          Remove voice comand from voice command list    \tcommand /", "contents": "vcrem" }
    ,{ "trigger": " /vol            Set volume on system                           \tcommand /", "contents": "vol" }
    ,{ "trigger": " /wallchops      Send notice to all ops on a channel            \tcommand /", "contents": "wallchops" }
    // DEPRECATED: replace by /splay ,{ "trigger": " /wavplay                                                                \tcommand /", "contents": "wavplay" }
    ,{ "trigger": " /while          Loop block of code until condition             \tcommand /", "contents": "while" }
    ,{ "trigger": " /window         Create or manipulate custom @window            \tcommand /", "contents": "window" }
    ,{ "trigger": " /winhelp        Open Microsoft online help files (.chm/.hlp)   \tcommand /", "contents": "winhelp" }
    ,{ "trigger": " /write          Write to a file                                \tcommand /", "contents": "write" }
    ,{ "trigger": " /writeini       Write to a section in an ini file              \tcommand /", "contents": "writeini" }
    ,{ "trigger": " /xyzzy          Easter Egg: Prints \"Nothing happens\"         \tcommand /", "contents": "xyzzy" }
    ,{ "trigger": " $abook                         \t$", "contents": "abook" }
    ,{ "trigger": " $abs                           \t$", "contents": "abs" }
    ,{ "trigger": " $acos                          \t$", "contents": "acos" }
    ,{ "trigger": " $active                        \t$", "contents": "active" }
    ,{ "trigger": " $activecid                     \t$", "contents": "activecid" }
    ,{ "trigger": " $activewid                     \t$", "contents": "activewid" }
    ,{ "trigger": " $adate                         \t$", "contents": "adate" }
    ,{ "trigger": " $address                       \t$", "contents": "address" }
    ,{ "trigger": " $addtok                        \t$", "contents": "addtok" }
    ,{ "trigger": " $addtokcs                      \t$", "contents": "addtokcs" }
    ,{ "trigger": " $agent                         \t$", "contents": "agent" }
    ,{ "trigger": " $agentname                     \t$", "contents": "agentname" }
    ,{ "trigger": " $agentstat                     \t$", "contents": "agentstat" }
    ,{ "trigger": " $agentver                      \t$", "contents": "agentver" }
    ,{ "trigger": " $alias                         \t$", "contents": "alias" }
    ,{ "trigger": " $and                           \t$", "contents": "and" }
    ,{ "trigger": " $anick                         \t$", "contents": "anick" }
    ,{ "trigger": " $ansi2mirc                     \t$", "contents": "ansi2mirc" }
    ,{ "trigger": " $aop                           \t$", "contents": "aop" }
    ,{ "trigger": " $appactive                     \t$", "contents": "appactive" }
    ,{ "trigger": " $appstate                      \t$", "contents": "appstate" }
    ,{ "trigger": " $asc                           \t$", "contents": "asc" }
    ,{ "trigger": " $asctime                       \t$", "contents": "asctime" }
    ,{ "trigger": " $asin                          \t$", "contents": "asin" }
    ,{ "trigger": " $atan                          \t$", "contents": "atan" }
    ,{ "trigger": " $atan2                         \t$", "contents": "atan2" }
    ,{ "trigger": " $auto                          \t$", "contents": "auto" }
    ,{ "trigger": " $avoice                        \t$", "contents": "avoice" }
    ,{ "trigger": " $away                          \t$", "contents": "away" }
    ,{ "trigger": " $awaymsg                       \t$", "contents": "awaymsg" }
    ,{ "trigger": " $awaytime                      \t$", "contents": "awaytime" }
    ,{ "trigger": " $banlist                       \t$", "contents": "banlist" }
    ,{ "trigger": " $banmask                       \t$", "contents": "banmask" }
    ,{ "trigger": " $base                          \t$", "contents": "base" }
    ,{ "trigger": " $beta                          \t$", "contents": "beta" }
    ,{ "trigger": " $bfind                         \t$", "contents": "bfind" }
    ,{ "trigger": " $bindip                        \t$", "contents": "bindip" }
    ,{ "trigger": " $bitoff                        \t$", "contents": "bitoff" }
    ,{ "trigger": " $biton                         \t$", "contents": "biton" }
    ,{ "trigger": " $bits                          \t$", "contents": "bits" }
    ,{ "trigger": " $bnick                         \t$", "contents": "bnick" }
    ,{ "trigger": " $bvar                          \t$", "contents": "bvar" }
    ,{ "trigger": " $bytes                         \t$", "contents": "bytes" }
    ,{ "trigger": " $calc                          \t$", "contents": "calc" }
    ,{ "trigger": " $caller                        \t$", "contents": "caller" }
    ,{ "trigger": " $cancel                        \t$", "contents": "cancel" }
    ,{ "trigger": " $cb                            \t$", "contents": "cb" }
    ,{ "trigger": " $cd                            \t$", "contents": "cd" }
    ,{ "trigger": " $ceil                          \t$", "contents": "ceil" }
    ,{ "trigger": " $chan                          \t$", "contents": "chan" }
    ,{ "trigger": " $chanmodes                     \t$", "contents": "chanmodes" }
    ,{ "trigger": " $channel                       \t$", "contents": "channel" }
    ,{ "trigger": " $chantypes                     \t$", "contents": "chantypes" }
    ,{ "trigger": " $chat                          \t$", "contents": "chat" }
    ,{ "trigger": " $chr                           \t$", "contents": "chr" }
    ,{ "trigger": " $cid                           \t$", "contents": "cid" }
    ,{ "trigger": " $clevel                        \t$", "contents": "clevel" }
    ,{ "trigger": " $click                         \t$", "contents": "click" }
    ,{ "trigger": " $cmdbox                        \t$", "contents": "cmdbox" }
    ,{ "trigger": " $cmdline                       \t$", "contents": "cmdline" }
    ,{ "trigger": " $cnick                         \t$", "contents": "cnick" }
    ,{ "trigger": " $color                         \t$", "contents": "color" }
    ,{ "trigger": " $colour                        \t$", "contents": "colour" }
    ,{ "trigger": " $com                           \t$", "contents": "com" }
    ,{ "trigger": " $comcall                       \t$", "contents": "comcall" }
    ,{ "trigger": " $comchan                       \t$", "contents": "comchan" }
    ,{ "trigger": " $comchar                       \t$", "contents": "comchar" }
    ,{ "trigger": " $comerr                        \t$", "contents": "comerr" }
    ,{ "trigger": " $compact                       \t$", "contents": "compact" }
    ,{ "trigger": " $compress                      \t$", "contents": "compress" }
    ,{ "trigger": " $comval                        \t$", "contents": "comval" }
    ,{ "trigger": " $cos                           \t$", "contents": "cos" }
    ,{ "trigger": " $cosh                          \t$", "contents": "cosh" }
    ,{ "trigger": " $count                         \t$", "contents": "count" }
    ,{ "trigger": " $cr                            \t$", "contents": "cr" }
    ,{ "trigger": " $crc                           \t$", "contents": "crc" }
    ,{ "trigger": " $creq                          \t$", "contents": "creq" }
    ,{ "trigger": " $crlf                          \t$", "contents": "crlf" }
    ,{ "trigger": " $ctime                         \t$", "contents": "ctime" }
    ,{ "trigger": " $ctimer                        \t$", "contents": "ctimer" }
    ,{ "trigger": " $ctrlenter                     \t$", "contents": "ctrlenter" }
    ,{ "trigger": " $date                          \t$", "contents": "date" }
    ,{ "trigger": " $day                           \t$", "contents": "day" }
    ,{ "trigger": " $daylight                      \t$", "contents": "daylight" }
    ,{ "trigger": " $dbuh                          \t$", "contents": "dbuh" }
    ,{ "trigger": " $dbuw                          \t$", "contents": "dbuw" }
    ,{ "trigger": " $dccignore                     \t$", "contents": "dccignore" }
    ,{ "trigger": " $dccport                       \t$", "contents": "dccport" }
    ,{ "trigger": " $dde                           \t$", "contents": "dde" }
    ,{ "trigger": " $ddename                       \t$", "contents": "ddename" }
    ,{ "trigger": " $debug                         \t$", "contents": "debug" }
    ,{ "trigger": " $decode                        \t$", "contents": "decode" }
    ,{ "trigger": " $decompress                    \t$", "contents": "decompress" }
    ,{ "trigger": " $deltok                        \t$", "contents": "deltok" }
    ,{ "trigger": " $devent                        \t$", "contents": "devent" }
    ,{ "trigger": " $dialog                        \t$", "contents": "dialog" }
    ,{ "trigger": " $did                           \t$", "contents": "did" }
    ,{ "trigger": " $didreg                        \t$", "contents": "didreg" }
    ,{ "trigger": " $didtok                        \t$", "contents": "didtok" }
    ,{ "trigger": " $didwm                         \t$", "contents": "didwm" }
    ,{ "trigger": " $dir                           \t$", "contents": "dir" }
    ,{ "trigger": " $disk                          \t$", "contents": "disk" }
    ,{ "trigger": " $dlevel                        \t$", "contents": "dlevel" }
    ,{ "trigger": " $dll                           \t$", "contents": "dll" }
    ,{ "trigger": " $dllcall                       \t$", "contents": "dllcall" }
    ,{ "trigger": " $dname                         \t$", "contents": "dname" }
    ,{ "trigger": " $dns                           \t$", "contents": "dns" }
    ,{ "trigger": " $dqwindow                      \t$", "contents": "dqwindow" }
    ,{ "trigger": " $duration                      \t$", "contents": "duration" }
    ,{ "trigger": " $ebeeps                        \t$", "contents": "ebeeps" }
    ,{ "trigger": " $editbox                       \t$", "contents": "editbox" }
    ,{ "trigger": " $email                         \t$", "contents": "email" }
    ,{ "trigger": " $emailaddr                     \t$", "contents": "emailaddr" }
    ,{ "trigger": " $encode                        \t$", "contents": "encode" }
    ,{ "trigger": " $envvar                        \t$", "contents": "envvar" }
    ,{ "trigger": " $error                         \t$", "contents": "error" }
    ,{ "trigger": " $eval                          \t$", "contents": "eval" }
    ,{ "trigger": " $evalnext                      \t$", "contents": "evalnext" }
    ,{ "trigger": " $event                         \t$", "contents": "event" }
    ,{ "trigger": " $eventid                       \t$", "contents": "eventid" }
    ,{ "trigger": " $exists                        \t$", "contents": "exists" }
    ,{ "trigger": " $exiting                       \t$", "contents": "exiting" }
    ,{ "trigger": " $false                         \t$", "contents": "false" }
    ,{ "trigger": " $feof                          \t$", "contents": "feof" }
    ,{ "trigger": " $ferr                          \t$", "contents": "ferr" }
    ,{ "trigger": " $fgetc                         \t$", "contents": "fgetc" }
    ,{ "trigger": " $file                          \t$", "contents": "file" }
    ,{ "trigger": " $filename                      \t$", "contents": "filename" }
    ,{ "trigger": " $filtered                      \t$", "contents": "filtered" }
    ,{ "trigger": " $finddir                       \t$", "contents": "finddir" }
    ,{ "trigger": " $finddirn                      \t$", "contents": "finddirn" }
    ,{ "trigger": " $findfile                      \t$", "contents": "findfile" }
    ,{ "trigger": " $findfilen                     \t$", "contents": "findfilen" }
    ,{ "trigger": " $findtok                       \t$", "contents": "findtok" }
    ,{ "trigger": " $findtokcs                     \t$", "contents": "findtokcs" }
    ,{ "trigger": " $fline                         \t$", "contents": "fline" }
    ,{ "trigger": " $floor                         \t$", "contents": "floor" }
    ,{ "trigger": " $font                          \t$", "contents": "font" }
    ,{ "trigger": " $fopen                         \t$", "contents": "fopen" }
    ,{ "trigger": " $fread                         \t$", "contents": "fread" }
    ,{ "trigger": " $fromeditbox                   \t$", "contents": "fromeditbox" }
    ,{ "trigger": " $fserv                         \t$", "contents": "fserv" }
    ,{ "trigger": " $fserve                        \t$", "contents": "fserve" }
    ,{ "trigger": " $fulladdress                   \t$", "contents": "fulladdress" }
    ,{ "trigger": " $fulldate                      \t$", "contents": "fulldate" }
    ,{ "trigger": " $fullname                      \t$", "contents": "fullname" }
    ,{ "trigger": " $fullscreen                    \t$", "contents": "fullscreen" }
    ,{ "trigger": " $get                           \t$", "contents": "get" }
    ,{ "trigger": " $getdir                        \t$", "contents": "getdir" }
    ,{ "trigger": " $getdot                        \t$", "contents": "getdot" }
    ,{ "trigger": " $gettok                        \t$", "contents": "gettok" }
    ,{ "trigger": " $gmt                           \t$", "contents": "gmt" }
    ,{ "trigger": " $group                         \t$", "contents": "group" }
    ,{ "trigger": " $halted                        \t$", "contents": "halted" }
    ,{ "trigger": " $hash                          \t$", "contents": "hash" }
    ,{ "trigger": " $height                        \t$", "contents": "height" }
    ,{ "trigger": " $hfile                         \t$", "contents": "hfile" }
    ,{ "trigger": " $hfind                         \t$", "contents": "hfind" }
    ,{ "trigger": " $hget                          \t$", "contents": "hget" }
    ,{ "trigger": " $highlight                     \t$", "contents": "highlight" }
    ,{ "trigger": " $hmac                          \t$", "contents": "hmac" }
    ,{ "trigger": " $hmatch                        \t$", "contents": "hmatch" }
    ,{ "trigger": " $hnick                         \t$", "contents": "hnick" }
    ,{ "trigger": " $host                          \t$", "contents": "host" }
    ,{ "trigger": " $hotline                       \t$", "contents": "hotline" }
    ,{ "trigger": " $hotlinepos                    \t$", "contents": "hotlinepos" }
    ,{ "trigger": " $hotlink                       \t$", "contents": "hotlink" }
    ,{ "trigger": " $hotp                          \t$", "contents": "hotp" }
    ,{ "trigger": " $hregex                        \t$", "contents": "hregex" }
    ,{ "trigger": " $hypot                         \t$", "contents": "hypot" }
    ,{ "trigger": " $iaddress                      \t$", "contents": "iaddress" }
    ,{ "trigger": " $ial                           \t$", "contents": "ial" }
    ,{ "trigger": " $ialchan                       \t$", "contents": "ialchan" }
    ,{ "trigger": " $ibl                           \t$", "contents": "ibl" }
    ,{ "trigger": " $idle                          \t$", "contents": "idle" }
    ,{ "trigger": " $iel                           \t$", "contents": "iel" }
    ,{ "trigger": " $ifmatch                       \t$", "contents": "ifmatch" }
    ,{ "trigger": " $ifmatch2                      \t$", "contents": "ifmatch2" }
    ,{ "trigger": " $ignore                        \t$", "contents": "ignore" }
    ,{ "trigger": " $iif                           \t$", "contents": "iif" }
    ,{ "trigger": " $iil                           \t$", "contents": "iil" }
    ,{ "trigger": " $inellipse                     \t$", "contents": "inellipse" }
    ,{ "trigger": " $ini                           \t$", "contents": "ini" }
    ,{ "trigger": " $initopic                      \t$", "contents": "initopic" }
    ,{ "trigger": " $inmidi                        \t$", "contents": "inmidi" }
    ,{ "trigger": " $inmode                        \t$", "contents": "inmode" }
    ,{ "trigger": " $inmp3                         \t$", "contents": "inmp3" }
    ,{ "trigger": " $inpaste                       \t$", "contents": "inpaste" }
    ,{ "trigger": " $inpoly                        \t$", "contents": "inpoly" }
    ,{ "trigger": " $input                         \t$", "contents": "input" }
    ,{ "trigger": " $inrect                        \t$", "contents": "inrect" }
    ,{ "trigger": " $inroundrect                   \t$", "contents": "inroundrect" }
    ,{ "trigger": " $insong                        \t$", "contents": "insong" }
    ,{ "trigger": " $instok                        \t$", "contents": "instok" }
    ,{ "trigger": " $int                           \t$", "contents": "int" }
    ,{ "trigger": " $intersect                     \t$", "contents": "intersect" }
    ,{ "trigger": " $inwave                        \t$", "contents": "inwave" }
    ,{ "trigger": " $inwho                         \t$", "contents": "inwho" }
    ,{ "trigger": " $ip                            \t$", "contents": "ip" }
    ,{ "trigger": " $iptype                        \t$", "contents": "iptype" }
    ,{ "trigger": " $iql                           \t$", "contents": "iql" }
    ,{ "trigger": " $isalias                       \t$", "contents": "isalias" }
    ,{ "trigger": " $isbit                         \t$", "contents": "isbit" }
    ,{ "trigger": " $isdde                         \t$", "contents": "isdde" }
    ,{ "trigger": " $isdir                         \t$", "contents": "isdir" }
    ,{ "trigger": " $isfile                        \t$", "contents": "isfile" }
    ,{ "trigger": " $isid                          \t$", "contents": "isid" }
    ,{ "trigger": " $islower                       \t$", "contents": "islower" }
    ,{ "trigger": " $istok                         \t$", "contents": "istok" }
    ,{ "trigger": " $isupper                       \t$", "contents": "isupper" }
    ,{ "trigger": " $isutf                         \t$", "contents": "isutf" }
    ,{ "trigger": " $keychar                       \t$", "contents": "keychar" }
    ,{ "trigger": " $keyrpt                        \t$", "contents": "keyrpt" }
    ,{ "trigger": " $keyval                        \t$", "contents": "keyval" }
    ,{ "trigger": " $knick                         \t$", "contents": "knick" }
    ,{ "trigger": " $lactive                       \t$", "contents": "lactive" }
    ,{ "trigger": " $lactivecid                    \t$", "contents": "lactivecid" }
    ,{ "trigger": " $lactivewid                    \t$", "contents": "lactivewid" }
    ,{ "trigger": " $left                          \t$", "contents": "left" }
    ,{ "trigger": " $leftwin                       \t$", "contents": "leftwin" }
    ,{ "trigger": " $leftwincid                    \t$", "contents": "leftwincid" }
    ,{ "trigger": " $leftwinwid                    \t$", "contents": "leftwinwid" }
    ,{ "trigger": " $len                           \t$", "contents": "len" }
    ,{ "trigger": " $level                         \t$", "contents": "level" }
    ,{ "trigger": " $lf                            \t$", "contents": "lf" }
    ,{ "trigger": " $line                          \t$", "contents": "line" }
    ,{ "trigger": " $lines                         \t$", "contents": "lines" }
    ,{ "trigger": " $link                          \t$", "contents": "link" }
    ,{ "trigger": " $lock                          \t$", "contents": "lock" }
    ,{ "trigger": " $locked                        \t$", "contents": "locked" }
    ,{ "trigger": " $lof                           \t$", "contents": "lof" }
    ,{ "trigger": " $log                           \t$", "contents": "log" }
    ,{ "trigger": " $log10                         \t$", "contents": "log10" }
    ,{ "trigger": " $logdir                        \t$", "contents": "logdir" }
    ,{ "trigger": " $logstamp                      \t$", "contents": "logstamp" }
    ,{ "trigger": " $logstampfmt                   \t$", "contents": "logstampfmt" }
    ,{ "trigger": " $longfn                        \t$", "contents": "longfn" }
    ,{ "trigger": " $longip                        \t$", "contents": "longip" }
    ,{ "trigger": " $lower                         \t$", "contents": "lower" }
    ,{ "trigger": " $ltimer                        \t$", "contents": "ltimer" }
    ,{ "trigger": " $maddress                      \t$", "contents": "maddress" }
    ,{ "trigger": " $mask                          \t$", "contents": "mask" }
    ,{ "trigger": " $matchkey                      \t$", "contents": "matchkey" }
    ,{ "trigger": " $matchtok                      \t$", "contents": "matchtok" }
    ,{ "trigger": " $matchtokcs                    \t$", "contents": "matchtokcs" }
    ,{ "trigger": " $md5                           \t$", "contents": "md5" }
    ,{ "trigger": " $me                            \t$", "contents": "me" }
    ,{ "trigger": " $menu                          \t$", "contents": "menu" }
    ,{ "trigger": " $menubar                       \t$", "contents": "menubar" }
    ,{ "trigger": " $menucontext                   \t$", "contents": "menucontext" }
    ,{ "trigger": " $menutype                      \t$", "contents": "menutype" }
    ,{ "trigger": " $mid                           \t$", "contents": "mid" }
    ,{ "trigger": " $mididir                       \t$", "contents": "mididir" }
    ,{ "trigger": " $mircdir                       \t$", "contents": "mircdir" }
    ,{ "trigger": " $mircexe                       \t$", "contents": "mircexe" }
    ,{ "trigger": " $mircini                       \t$", "contents": "mircini" }
    ,{ "trigger": " $mkfn                          \t$", "contents": "mkfn" }
    ,{ "trigger": " $mklogfn                       \t$", "contents": "mklogfn" }
    ,{ "trigger": " $mknickfn                      \t$", "contents": "mknickfn" }
    ,{ "trigger": " $mnick                         \t$", "contents": "mnick" }
    ,{ "trigger": " $mode                          \t$", "contents": "mode" }
    ,{ "trigger": " $modefirst                     \t$", "contents": "modefirst" }
    ,{ "trigger": " $modelast                      \t$", "contents": "modelast" }
    ,{ "trigger": " $modespl                       \t$", "contents": "modespl" }
    ,{ "trigger": " $mouse                         \t$", "contents": "mouse" }
    ,{ "trigger": " $mp3                           \t$", "contents": "mp3" }
    ,{ "trigger": " $mp3dir                        \t$", "contents": "mp3dir" }
    ,{ "trigger": " $msfile                        \t$", "contents": "msfile" }
    ,{ "trigger": " $msgstamp                      \t$", "contents": "msgstamp" }
    ,{ "trigger": " $msgtags                       \t$", "contents": "msgtags" }
    ,{ "trigger": " $naddress                      \t$", "contents": "naddress" }
    ,{ "trigger": " $network                       \t$", "contents": "network" }
    ,{ "trigger": " $newnick                       \t$", "contents": "newnick" }
    ,{ "trigger": " $nhnick                        \t$", "contents": "nhnick" }
    ,{ "trigger": " $nick                          \t$", "contents": "nick" }
    ,{ "trigger": " $nickmode                      \t$", "contents": "nickmode" }
    ,{ "trigger": " $no                            \t$", "contents": "no" }
    ,{ "trigger": " $nofile                        \t$", "contents": "nofile" }
    ,{ "trigger": " $nopath                        \t$", "contents": "nopath" }
    ,{ "trigger": " $nopnick                       \t$", "contents": "nopnick" }
    ,{ "trigger": " $noqt                          \t$", "contents": "noqt" }
    ,{ "trigger": " $not                           \t$", "contents": "not" }
    ,{ "trigger": " $notags                        \t$", "contents": "notags" }
    ,{ "trigger": " $notify                        \t$", "contents": "notify" }
    ,{ "trigger": " $null                          \t$", "contents": "null" }
    ,{ "trigger": " $numeric                       \t$", "contents": "numeric" }
    ,{ "trigger": " $numtok                        \t$", "contents": "numtok" }
    ,{ "trigger": " $nvnick                        \t$", "contents": "nvnick" }
    ,{ "trigger": " $ok                            \t$", "contents": "ok" }
    ,{ "trigger": " $online                        \t$", "contents": "online" }
    ,{ "trigger": " $onlineserver                  \t$", "contents": "onlineserver" }
    ,{ "trigger": " $onlinetotal                   \t$", "contents": "onlinetotal" }
    ,{ "trigger": " $onpoly                        \t$", "contents": "onpoly" }
    ,{ "trigger": " $opnick                        \t$", "contents": "opnick" }
    ,{ "trigger": " $or                            \t$", "contents": "or" }
    ,{ "trigger": " $ord                           \t$", "contents": "ord" }
    ,{ "trigger": " $os                            \t$", "contents": "os" }
    ,{ "trigger": " $parms                         \t$", "contents": "parms" }
    ,{ "trigger": " $parseline                     \t$", "contents": "parseline" }
    ,{ "trigger": " $parsetype                     \t$", "contents": "parsetype" }
    ,{ "trigger": " $parseutf                      \t$", "contents": "parseutf" }
    ,{ "trigger": " $passivedcc                    \t$", "contents": "passivedcc" }
    ,{ "trigger": " $pi                            \t$", "contents": "pi" }
    ,{ "trigger": " $pic                           \t$", "contents": "pic" }
    ,{ "trigger": " $play                          \t$", "contents": "play" }
    ,{ "trigger": " $pnick                         \t$", "contents": "pnick" }
    ,{ "trigger": " $portable                      \t$", "contents": "portable" }
    ,{ "trigger": " $portfree                      \t$", "contents": "portfree" }
    ,{ "trigger": " $pos                           \t$", "contents": "pos" }
    ,{ "trigger": " $poscs                         \t$", "contents": "poscs" }
    ,{ "trigger": " $prefix                        \t$", "contents": "prefix" }
    ,{ "trigger": " $prop                          \t$", "contents": "prop" }
    ,{ "trigger": " $protect                       \t$", "contents": "protect" }
    ,{ "trigger": " $puttok                        \t$", "contents": "puttok" }
    ,{ "trigger": " $qt                            \t$", "contents": "qt" }
    ,{ "trigger": " $query                         \t$", "contents": "query" }
    ,{ "trigger": " $r                             \t$", "contents": "r" }
    ,{ "trigger": " $raddress                      \t$", "contents": "raddress" }
    ,{ "trigger": " $rand                          \t$", "contents": "rand" }
    ,{ "trigger": " $rawbytes                      \t$", "contents": "rawbytes" }
    ,{ "trigger": " $rawmsg                        \t$", "contents": "rawmsg" }
    ,{ "trigger": " $read                          \t$", "contents": "read" }
    ,{ "trigger": " $readini                       \t$", "contents": "readini" }
    ,{ "trigger": " $readn                         \t$", "contents": "readn" }
    ,{ "trigger": " $regbr                         \t$", "contents": "regbr" }
    ,{ "trigger": " $regerrstr                     \t$", "contents": "regerrstr" }
    ,{ "trigger": " $regex                         \t$", "contents": "regex" }
    ,{ "trigger": " $regml                         \t$", "contents": "regml" }
    ,{ "trigger": " $regmlex                       \t$", "contents": "regmlex" }
    ,{ "trigger": " $regsub                        \t$", "contents": "regsub" }
    ,{ "trigger": " $regsubex                      \t$", "contents": "regsubex" }
    ,{ "trigger": " $remote                        \t$", "contents": "remote" }
    ,{ "trigger": " $remove                        \t$", "contents": "remove" }
    ,{ "trigger": " $removecs                      \t$", "contents": "removecs" }
    ,{ "trigger": " $remtok                        \t$", "contents": "remtok" }
    ,{ "trigger": " $remtokcs                      \t$", "contents": "remtokcs" }
    ,{ "trigger": " $replace                       \t$", "contents": "replace" }
    ,{ "trigger": " $replacecs                     \t$", "contents": "replacecs" }
    ,{ "trigger": " $replacex                      \t$", "contents": "replacex" }
    ,{ "trigger": " $replacexcs                    \t$", "contents": "replacexcs" }
    ,{ "trigger": " $reptok                        \t$", "contents": "reptok" }
    ,{ "trigger": " $reptokcs                      \t$", "contents": "reptokcs" }
    ,{ "trigger": " $result                        \t$", "contents": "result" }
    ,{ "trigger": " $rgb                           \t$", "contents": "rgb" }
    ,{ "trigger": " $right                         \t$", "contents": "right" }
    ,{ "trigger": " $rnick                         \t$", "contents": "rnick" }
    ,{ "trigger": " $round                         \t$", "contents": "round" }
    ,{ "trigger": " $samepath                      \t$", "contents": "samepath" }
    ,{ "trigger": " $scid                          \t$", "contents": "scid" }
    ,{ "trigger": " $scon                          \t$", "contents": "scon" }
    ,{ "trigger": " $script                        \t$", "contents": "script" }
    ,{ "trigger": " $scriptdir                     \t$", "contents": "scriptdir" }
    ,{ "trigger": " $scriptline                    \t$", "contents": "scriptline" }
    ,{ "trigger": " $sdir                          \t$", "contents": "sdir" }
    ,{ "trigger": " $send                          \t$", "contents": "send" }
    ,{ "trigger": " $server                        \t$", "contents": "server" }
    ,{ "trigger": " $serverip                      \t$", "contents": "serverip" }
    ,{ "trigger": " $servertarget                  \t$", "contents": "servertarget" }
    ,{ "trigger": " $sfile                         \t$", "contents": "sfile" }
    ,{ "trigger": " $sha1                          \t$", "contents": "sha1" }
    ,{ "trigger": " $sha256                        \t$", "contents": "sha256" }
    ,{ "trigger": " $sha384                        \t$", "contents": "sha384" }
    ,{ "trigger": " $sha512                        \t$", "contents": "sha512" }
    ,{ "trigger": " $shortfn                       \t$", "contents": "shortfn" }
    ,{ "trigger": " $show                          \t$", "contents": "show" }
    ,{ "trigger": " $signal                        \t$", "contents": "signal" }
    ,{ "trigger": " $sin                           \t$", "contents": "sin" }
    ,{ "trigger": " $sinh                          \t$", "contents": "sinh" }
    ,{ "trigger": " $site                          \t$", "contents": "site" }
    ,{ "trigger": " $sline                         \t$", "contents": "sline" }
    ,{ "trigger": " $snick                         \t$", "contents": "snick" }
    ,{ "trigger": " $snicks                        \t$", "contents": "snicks" }
    ,{ "trigger": " $snotify                       \t$", "contents": "snotify" }
    ,{ "trigger": " $sock                          \t$", "contents": "sock" }
    ,{ "trigger": " $sockbr                        \t$", "contents": "sockbr" }
    ,{ "trigger": " $sockerr                       \t$", "contents": "sockerr" }
    ,{ "trigger": " $sockname                      \t$", "contents": "sockname" }
    ,{ "trigger": " $sorttok                       \t$", "contents": "sorttok" }
    ,{ "trigger": " $sorttokcs                     \t$", "contents": "sorttokcs" }
    ,{ "trigger": " $sound                         \t$", "contents": "sound" }
    ,{ "trigger": " $speak                         \t$", "contents": "speak" }
    ,{ "trigger": " $sqrt                          \t$", "contents": "sqrt" }
    ,{ "trigger": " $sreq                          \t$", "contents": "sreq" }
    ,{ "trigger": " $ssl                           \t$", "contents": "ssl" }
    ,{ "trigger": " $sslcertsha1                   \t$", "contents": "sslcertsha1" }
    ,{ "trigger": " $sslcertsha256                 \t$", "contents": "sslcertsha256" }
    ,{ "trigger": " $ssldll                        \t$", "contents": "ssldll" }
    ,{ "trigger": " $ssllibdll                     \t$", "contents": "ssllibdll" }
    ,{ "trigger": " $sslready                      \t$", "contents": "sslready" }
    ,{ "trigger": " $sslversion                    \t$", "contents": "sslversion" }
    ,{ "trigger": " $starting                      \t$", "contents": "starting" }
    ,{ "trigger": " $status                        \t$", "contents": "status" }
    ,{ "trigger": " $str                           \t$", "contents": "str" }
    ,{ "trigger": " $strip                         \t$", "contents": "strip" }
    ,{ "trigger": " $stripped                      \t$", "contents": "stripped" }
    ,{ "trigger": " $style                         \t$", "contents": "style" }
    ,{ "trigger": " $submenu                       \t$", "contents": "submenu" }
    ,{ "trigger": " $switchbar                     \t$", "contents": "switchbar" }
    ,{ "trigger": " $sysdir                        \t$", "contents": "sysdir" }
    ,{ "trigger": " $tan                           \t$", "contents": "tan" }
    ,{ "trigger": " $tanh                          \t$", "contents": "tanh" }
    ,{ "trigger": " $target                        \t$", "contents": "target" }
    ,{ "trigger": " $tempfn                        \t$", "contents": "tempfn" }
    ,{ "trigger": " $ticks                         \t$", "contents": "ticks" }
    ,{ "trigger": " $time                          \t$", "contents": "time" }
    ,{ "trigger": " $timeout                       \t$", "contents": "timeout" }
    ,{ "trigger": " $timer                         \t$", "contents": "timer" }
    ,{ "trigger": " $timestamp                     \t$", "contents": "timestamp" }
    ,{ "trigger": " $timestampfmt                  \t$", "contents": "timestampfmt" }
    ,{ "trigger": " $timezone                      \t$", "contents": "timezone" }
    ,{ "trigger": " $tip                           \t$", "contents": "tip" }
    ,{ "trigger": " $tips                          \t$", "contents": "tips" }
    ,{ "trigger": " $titlebar                      \t$", "contents": "titlebar" }
    ,{ "trigger": " $token                         \t$", "contents": "token" }
    ,{ "trigger": " $toolbar                       \t$", "contents": "toolbar" }
    ,{ "trigger": " $topic                         \t$", "contents": "topic" }
    ,{ "trigger": " $totp                          \t$", "contents": "totp" }
    ,{ "trigger": " $treebar                       \t$", "contents": "treebar" }
    ,{ "trigger": " $true                          \t$", "contents": "true" }
    ,{ "trigger": " $trust                         \t$", "contents": "trust" }
    ,{ "trigger": " $ulevel                        \t$", "contents": "ulevel" }
    ,{ "trigger": " $ulist                         \t$", "contents": "ulist" }
    ,{ "trigger": " $unsafe                        \t$", "contents": "unsafe" }
    ,{ "trigger": " $upper                         \t$", "contents": "upper" }
    ,{ "trigger": " $uptime                        \t$", "contents": "uptime" }
    ,{ "trigger": " $url                           \t$", "contents": "url" }
    ,{ "trigger": " $usermode                      \t$", "contents": "usermode" }
    ,{ "trigger": " $utfdecode                     \t$", "contents": "utfdecode" }
    ,{ "trigger": " $utfencode                     \t$", "contents": "utfencode" }
    ,{ "trigger": " $v1                            \t$", "contents": "v1" }
    ,{ "trigger": " $v2                            \t$", "contents": "v2" }
    ,{ "trigger": " $var                           \t$", "contents": "var" }
    ,{ "trigger": " $vc                            \t$", "contents": "vc" }
    ,{ "trigger": " $vcmd                          \t$", "contents": "vcmd" }
    ,{ "trigger": " $vcmdstat                      \t$", "contents": "vcmdstat" }
    ,{ "trigger": " $vcmdver                       \t$", "contents": "vcmdver" }
    ,{ "trigger": " $version                       \t$", "contents": "version" }
    ,{ "trigger": " $vnick                         \t$", "contents": "vnick" }
    ,{ "trigger": " $vol                           \t$", "contents": "vol" }
    ,{ "trigger": " $wavedir                       \t$", "contents": "wavedir" }
    ,{ "trigger": " $wid                           \t$", "contents": "wid" }
    ,{ "trigger": " $width                         \t$", "contents": "width" }
    ,{ "trigger": " $wildsite                      \t$", "contents": "wildsite" }
    ,{ "trigger": " $wildtok                       \t$", "contents": "wildtok" }
    ,{ "trigger": " $wildtokcs                     \t$", "contents": "wildtokcs" }
    ,{ "trigger": " $window                        \t$", "contents": "window" }
    ,{ "trigger": " $wrap                          \t$", "contents": "wrap" }
    ,{ "trigger": " $xor                           \t$", "contents": "xor" }
    ,{ "trigger": " $yes                           \t$", "contents": "yes" }
  ]
}
